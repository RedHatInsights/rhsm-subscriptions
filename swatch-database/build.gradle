plugins {
    id 'org.liquibase.gradle'
    id 'swatch.java-conventions'
    id 'application'
    id 'java-library'
}

ext {
    javaMainClass = "org.candlepin.subscriptions.liquibase.cli.MigrationService"
}

application {
    mainClassName = javaMainClass
}

jar {
    manifest {
        attributes(
                "Main-Class": javaMainClass
        )
    }
    // Add all dependencies so we have a self-contained JAR
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

sourceSets {
    liquibaseTestSupport {
        java {
            srcDir 'src/main/java'
        }
    }
}

java {
    // See https://docs.gradle.org/current/userguide/feature_variants.html
    registerFeature('liquibaseTestSupport') {
        usingSourceSet(sourceSets.liquibaseTestSupport)
        capability('com.redhat.swatch', 'swatch-database-liquibase-test', '1.0')
    }
}

// TODO Remove this.  The standalone app I wrote is more powerful making the plugin redundant
// Gather database connection information from the environment if it is available.  Note that in
// an actual OpenShift deployment, the migrations are run as a QuarkusApplication and **not**
// through gradle.  I put the environment variable parsing in place on the off chance that a
// developer needs to override the default values.
def dbConfigProvider = providers.environmentVariablesPrefixedBy("DATABASE_")
def config = dbConfigProvider.get()

def database = config.getOrDefault('DATABASE_DATABASE', 'rhsm-subscriptions')
def host = config.getOrDefault('DATABASE_HOST', 'localhost')
def port = config.getOrDefault('DATABASE_PORT', '5432')
def jdbcUrl = "jdbc:postgresql://${host}:${port}/${database}"

def dbUsername = config.getOrDefault('DATABASE_USERNAME', 'rhsm-subscriptions')
def dbPassword = config.getOrDefault('DATABASE_PASSWORD', 'rhsm-subscriptions')

liquibase {
    // force UTC time zone to be consistent with the app
    jvmArgs "-Duser.timezone=UTC"
    activities {
        core {
            // Unfortunately, changing the directory name that contains the changeset files (e.g.
            // from "liquibase" to "core" changes the checksum for the changeset and the changeset
            // shows up as not being applied.
            changelogFile 'liquibase/changelog.xml'

            url jdbcUrl
            username dbUsername
            password dbPassword
            logLevel "info"
        }
        contracts {
            databaseChangeLogTableName "DATABASECHANGELOG_SWATCH_CONTRACTS"
            databaseChangeLogLockTableName "DATABASECHANGELOGLOCK_SWATCH_CONTRACTS"

            // Unfortunately, changing the directory name that contains the changeset files (e.g.
            // from "liquibase" to "core" changes the checksum for the changeset and the changeset
            // shows up as not being applied.
            changelogFile 'db/changelog.xml'

            url jdbcUrl
            username dbUsername
            password dbPassword
            logLevel "info"
        }
    }
    runList = 'core, contracts'
}

dependencies {
    // Classpath for running with ./gradlew :swatch-database run or with the jar file
    runtimeOnly libraries["postgresql"]
    runtimeOnly libraries["logback-classic"]
    implementation(libraries["liquibase-cli"]) {
        // These classes are also bundled into liquibase-core
        exclude group: 'org.liquibase', module: 'liquibase-standard'
    }
    implementation libraries["slf4j-api"]
    implementation libraries["liquibase-core"]

    // Classpath for when other projects pull this one in for creating the DB schema during tests
    // Be very careful not to pollute the classpath since this project is consumed by both
    // Quarkus and Spring projects
    liquibaseTestSupportApi libraries["slf4j-api"]
    liquibaseTestSupportApi libraries["liquibase-core"]
    liquibaseTestSupportRuntimeOnly sourceSets.main.output
}
