/*
 * Copyright Red Hat, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * Red Hat trademarks are not licensed under GPLv3. No permission is
 * granted to use or replicate Red Hat trademarks that are incorporated
 * in this software or its documentation.
 */
package com.redhat.swatch.utilization.util;

import com.fasterxml.uuid.Generators;
import com.fasterxml.uuid.impl.NameBasedGenerator;
import com.redhat.swatch.configuration.registry.ProductId;
import com.redhat.swatch.utilization.model.Measurement;
import com.redhat.swatch.utilization.model.UtilizationSummary;
import jakarta.enterprise.context.ApplicationScoped;
import java.util.Objects;
import java.util.UUID;
import lombok.extern.slf4j.Slf4j;

/**
 * Generates deterministic UUID v5 identifiers for utilization summary tracking.
 *
 * <p>This bean uses FasterXML's UUID generator to create reproducible UUIDs based on orgID, product
 * ID, metricID, and optionally billingAccountID for metered products. UUID v5 uses SHA-1 hashing to
 * ensure the same combination of inputs always produces the same UUID.
 */
@Slf4j
@ApplicationScoped
public class UtilizationSummaryIdGenerator {

  private static final UUID NAMESPACE_DNS = UUID.fromString("6ba7b810-9dad-11d1-80b4-00c04fd430c8");
  private final NameBasedGenerator generator = Generators.nameBasedGenerator(NAMESPACE_DNS);

  /** Determine whether to generate a metered or non-metered ID */
  public UUID generateId(UtilizationSummary utilization, Measurement measurement) {
    Objects.requireNonNull(utilization, "utilization must not be null");
    Objects.requireNonNull(utilization.getProductId(), "utilization.productId must not be null");
    Objects.requireNonNull(measurement, "measurement must not be null");
    ProductId product = ProductId.fromString(utilization.getProductId());

    if (product.isPayg()) {
      return generateMeteredId(
          utilization.getOrgId(),
          utilization.getProductId(),
          measurement.getMetricId(),
          utilization.getBillingAccountId());
    } else {
      return generateNonMeteredId(
          utilization.getOrgId(), utilization.getProductId(), measurement.getMetricId());
    }
  }

  /**
   * Generates a deterministic UUID v5 for non-metered utilization tracking. The UUID is generated
   * by hashing: "{orgId}:{productId}:{metricId}"
   */
  private UUID generateNonMeteredId(String orgId, String productId, String metricId) {
    Objects.requireNonNull(orgId, "orgId must not be null");
    Objects.requireNonNull(productId, "productId must not be null");
    Objects.requireNonNull(metricId, "metricId must not be null");

    String name = String.format("%s:%s:%s", orgId, productId, metricId);

    log.debug(
        "Generating UUID v5 for non-metered: orgId={}, productId={}, metricId={}",
        orgId,
        productId,
        metricId);

    return generator.generate(name);
  }

  /**
   * Generates a deterministic UUID v5 for metered utilization tracking. The UUID is generated by
   * hashing: "{orgId}:{productId}:{metricId}:{billingAccountId}"
   */
  private UUID generateMeteredId(
      String orgId, String productId, String metricId, String billingAccountId) {
    Objects.requireNonNull(orgId, "orgId must not be null");
    Objects.requireNonNull(productId, "productId must not be null");
    Objects.requireNonNull(metricId, "metricId must not be null");
    Objects.requireNonNull(billingAccountId, "billingAccountId must not be null");

    String name = String.format("%s:%s:%s:%s", orgId, productId, metricId, billingAccountId);

    log.debug(
        "Generating UUID v5 for metered: orgId={}, productId={}, metricId={}, billingAccountId={}",
        orgId,
        productId,
        metricId,
        billingAccountId);

    return generator.generate(name);
  }
}
