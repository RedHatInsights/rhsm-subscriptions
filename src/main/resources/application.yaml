# These are core, default properties that we don't want the user to change.  Take care to use
# spring.config.additional-location instead of spring.config.location so that this file will continue
# getting loaded.
# See https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-application-property-files

resteasy:
  jaxrs:
    app:
      registration: property
      classes: org.candlepin.subscriptions.resteasy.JaxrsApplication

spring:
  # load the common core definitions
  config:
    import: classpath:swatch-core/application.yaml
  profiles:
    active:
      - api
      - capacity-ingress
      - rhsm-conduit
      - worker
      - openshift-metering-worker
      - rh-marketplace
      - kafka-queue
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_HOST}:${KAFKA_BOOTSTRAP_PORT}
    listener:
      # The number of threads that will be processing messages (should match
      # the number of partitions on the queue)
      concurrency: ${KAFKA_MESSAGE_THREADS:1}
      idle-event-interval: ${KAFKA_IDLE_EVENT_INTERVAL:5s}
    consumer:
      properties:
        # Required kafka defaults
        max.poll.interval.ms: ${KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS:1800000}
        reconnect.backoff.ms: ${KAFKA_CONSUMER_RECONNECT_BACKOFF_MS:2000}
        reconnect.backoff.max.ms: ${KAFKA_CONSUMER_RECONNECT_BACKOFF_MAX_MS:10000}
        default.api.timeout.ms: ${KAFKA_API_RECONNECT_TIMEOUT_MS:480000}
      # if no offset commit exists yet, set to earliest
      auto-offset-reset: earliest
      max-poll-records: 1

rhsm-subscriptions:
  jobs:
    capture-hourly-snapshot-schedule: ${CAPTURE_HOURLY_SNAPSHOT_SCHEDULE:0 0 * * * ?}
    capture-snapshot-schedule: ${CAPTURE_SNAPSHOT_SCHEDULE:0 0 1 * * ?}
    purge-snapshot-schedule: ${PURGE_SNAPSHOT_SCHEDULE:0 0 1 * * ?}
    metering-schedule: ${METERING_SCHEDULE:0 0 1 * * ?}
    subscription-sync-schedule: ${SUBSCRIPTION_SYNC_SCHEDULE:0 0 10 * * ?}
    offering-sync-schedule: ${OFFERING_SYNC_SCHEDULE:0 0 2 * * ?}
  account-batch-size: ${ACCOUNT_BATCH_SIZE:1}
  product-whitelist-resource-location: ${PRODUCT_WHITELIST_RESOURCE_LOCATION:}
  tasks:
    topic: ${KAFKA_TOPIC:platform.rhsm-subscriptions.tasks}
    kafka-group-id: ${KAFKA_GROUP_ID:rhsm-subscriptions-task-processor}
    seek-override-end: ${KAFKA_SEEK_OVERRIDE_END:false}
    seek-override-timestamp: ${KAFKA_SEEK_OVERRIDE_TIMESTAMP:}
  metering:
    prometheus:
      client:
        token: ${PROM_AUTH_TOKEN:}
        url: ${PROM_URL:https://localhost/api/v1}
      metric:
        accountQueryTemplates:
          default: >-
            ${OPENSHIFT_ENABLED_ACCOUNT_PROMQL:group(min_over_time(#{metric.queryParams[prometheusMetadataMetric]}{product='#{metric.queryParams[product]}', ebs_account != '', billing_model='marketplace'}[1h]))
            by (ebs_account)}
    tasks:
      topic: ${METERING_TASK_TOPIC:platform.rhsm-subscriptions.metering-tasks}
      kafka-group-id: ${METERING_TASK_GROUP_ID:metering-task-processor}
      seek-override-end: ${KAFKA_SEEK_OVERRIDE_END:false}
      seek-override-timestamp: ${KAFKA_SEEK_OVERRIDE_TIMESTAMP:}
  prometheus-latency-duration: ${PROMETHEUS_LATENCY_DURATION:4h}
  hourly-tally-offset: ${HOURLY_TALLY_OFFSET:120m}
  metric-lookup-range-duration: ${METRIC_LOOKUP_RANGE:1h}
  subscription-sync-enabled: ${SUBSCRIPTION_SYNC_ENABLED:false}
  subscription:
    use-stub: ${SUBSCRIPTION_USE_STUB:false}
    url: ${SUBSCRIPTION_URL:https://subscription.qa.api.redhat.com/svcrest/subscription/v5}
    keystore: file:${SUBSCRIPTION_KEYSTORE:}
    keystore-password: ${SUBSCRIPTION_KEYSTORE_PASSWORD:changeit}
    max-connections: ${SUBSCRIPTION_MAX_CONNECTIONS:100}
    back-off-initial-interval: ${SUBSCRIPTION_BACKOFF_INITIAL_INTERVAL:1s}
    max-retry-attempts: ${SUBSCRIPTION_MAX_RETRY_ATTEMPTS:4}
    page-size: ${SUBSCRIPTION_PAGE_SIZE:1000}
    ignore-expired-older-than: ${SUBSCRIPTION_IGNORE_EXPIRED_OLDER_THAN:2m}
    ignore-starting-later-than: ${SUBSCRIPTION_IGNORE_STARTING_LATER_THAN:2m}
    tasks:
      topic: platform.rhsm-subscriptions.subscription-sync
      kafka-group-id: subscription-worker
  subscription-prune:
    tasks:
      topic: platform.rhsm-subscriptions.subscription-prune
      kafka-group-id: subscription-prune-worker
  capacity:
    tasks:
      topic: platform.rhsm-subscriptions.capacity-reconcile
      kafka-group-id: capacity-reconciliation-worker
  user-service:
    use-stub: ${USER_USE_STUB:false}
    url: https://${USER_HOST:localhost}:${USER_PORT:443}
    max-connections: ${USER_MAX_CONNECTIONS:100}
    keystore: file:${RHSM_KEYSTORE:}
    keystore-password: ${RHSM_KEYSTORE_PASSWORD:changeit}
    back-off-initial-interval: ${USER_BACK_OFF_INITIAL_INTERVAL:1s}
    back-off-max-interval: ${USER_BACK_OFF_MAX_INTERVAL:1m}
    back-off-multiplier: ${USER_BACK_OFF_MULTIPLIER:2}
    max-attempts: ${USER_MAX_ATTEMPTS:1}
  rh-marketplace-tasks:
    topic: platform.rhsm-subscriptions.tally
    kafka-group-id: rh-marketplace-worker
    seek-override-end: ${KAFKA_SEEK_OVERRIDE_END:false}
    seek-override-timestamp: ${KAFKA_SEEK_OVERRIDE_TIMESTAMP:}
