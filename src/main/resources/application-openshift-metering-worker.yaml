METERING_TASK_TOPIC: ${clowder.kafka.topics[?(@.requestedName == 'platform.rhsm-subscriptions.metering-tasks')].name:platform.rhsm-subscriptions.metering-tasks}
SERVICE_INSTANCE_INGRESS_TOPIC: ${clowder.kafka.topics[?(@.requestedName == 'platform.rhsm-subscriptions.service-instance-ingress')].name:platform.rhsm-subscriptions.service-instance-ingress}
rhsm-subscriptions:
  # Use Spring Resource notation for this (e.g. "classpath:" or "file:")
  account-list-resource-location: ${ACCOUNT_LIST_RESOURCE_LOCATION:}
  account-batch-size: ${ACCOUNT_BATCH_SIZE:1}

  metering:
    prometheus:
      metric:
        queryTemplates:
          default: >-
            max(#{metric.prometheus.queryParams[metric]}) by (#{metric.prometheus.queryParams[instanceKey]})
            * on(#{metric.prometheus.queryParams[instanceKey]}) group_right
            min_over_time(#{metric.prometheus.queryParams[metadataMetric]}{product=~"#{metric.prometheus.queryParams[product]}", external_organization="#{runtime[orgId]}", billing_model="marketplace", support=~"Premium|Standard|Self-Support|None"}[1h])
          addonSamples: >-
            max(#{metric.prometheus.queryParams[metric]}) by (#{metric.prometheus.queryParams[instanceKey]})
            * on(#{metric.prometheus.queryParams[instanceKey]}) group_right
            min_over_time(#{metric.prometheus.queryParams[metadataMetric]}{resource_type="addon",resource_name="#{metric.prometheus.queryParams[resourceName]}", external_organization="#{runtime[orgId]}", billing_model="marketplace", support=~"Premium|Standard|Self-Support|None"}[1h])
        maxAttempts: ${OPENSHIFT_MAX_ATTEMPTS:50}
        backOffMaxInterval: ${OPENSHIFT_BACK_OFF_MAX_INTERVAL:50000}
        backOffInitialInterval: ${OPENSHIFT_BACK_OFF_INITIAL_INTERVAL:1000}
        backOffMultiplier: ${OPENSHIFT_BACK_OFF_MULTIPLIER:1.5}
        eventSource: ${EVENT_SOURCE}
        rangeInMinutes: ${OPENSHIFT_METERING_RANGE:60}
        jobMaxAttempts: ${METERING_JOB_MAX_ATTEMPTS:3}
        jobBackOffMaxInterval: ${METERING_JOB_BACK_OFF_MAX_INTERVAL:50000}
        jobBackOffInitialInterval: ${METERING_JOB_BACK_OFF_INITIAL_INTERVAL:1000}
    tasks:
      topic: ${METERING_TASK_TOPIC}
      kafka-group-id: ${METERING_TASK_GROUP_ID:metering-task-processor}
      seek-override-end: ${KAFKA_SEEK_OVERRIDE_END:false}
      seek-override-timestamp: ${KAFKA_SEEK_OVERRIDE_TIMESTAMP:}
    events:
      topic: ${SERVICE_INSTANCE_INGRESS_TOPIC}
      kafka-group-id: swatch-instance-ingress
      seek-override-end: ${SERVICE_INSTANCE_INGRESS_KAFKA_SEEK_OVERRIDE_END:false}
      seek-override-timestamp: ${SERVICE_INSTANCE_INGRESS_KAFKA_SEEK_OVERRIDE_TIMESTAMP:}
      max-poll-records: ${SERVICE_INSTANCE_INGRESS_KAFKA_MAX_POLL_RECORDS:500}
