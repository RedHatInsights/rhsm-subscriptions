<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="202001141534-1" author="awood">
        <createTable tableName="hardware_measurements">
            <column name="snapshot_id" type="UUID">
                <constraints referencedTableName="tally_snapshots" referencedColumnNames="id"
                    nullable="false" foreignKeyName="snapshot_measures_fk" deleteCascade="true"/>
            </column>
            <column name="measurement_type" type="VARCHAR(32)">
                <constraints nullable="false"/>
            </column>
            <column name="cores" type="INT"/>
            <column name="instance_count" type="INT"/>
            <column name="sockets" type="INT"/>
        </createTable>

        <!-- A unique constraint across these two columns would suffice, but the @ElementCollection needs a
             primary key in the Embeddable for efficient deletes and updates -->
        <addPrimaryKey tableName="hardware_measurements" columnNames="snapshot_id, measurement_type"
            constraintName="hardware_measurements_composite_pk" />
    </changeSet>

    <changeSet id="202001141534-2" author="awood">
       <createIndex tableName="hardware_measurements" indexName="snapshot_id_idx">
           <column name="snapshot_id"/>
       </createIndex>
    </changeSet>

    <changeSet id="202001141534-3" author="awood">
        <addColumn tableName="tally_snapshots">
            <column name="unit_of_measure" type="VARCHAR(32)"/>
        </addColumn>
    </changeSet>

    <changeSet id="202001141534-4" author="awood">
        <customChange class="org.candlepin.subscriptions.liquibase.MigrateTallyColumnsTask"/>
    </changeSet>

    <changeSet id="202001141534-5" author="awood" dbms="postgresql">
        <createProcedure>
            CREATE FUNCTION copy_measurement() RETURNS trigger AS $$
            BEGIN
                IF (NEW.measurement_type = 'total') THEN
                    UPDATE tally_snapshots SET
                        cores = NEW.cores,
                        instance_count = NEW.instance_count,
                        sockets = NEW.sockets
                    WHERE id = NEW.snapshot_id;
                ELSIF (NEW.measurement_type = 'physical') THEN
                    UPDATE tally_snapshots SET
                        physical_cores = NEW.cores,
                        physical_instance_count = NEW.instance_count,
                        physical_sockets = NEW.sockets
                    WHERE id = NEW.snapshot_id;
                ELSIF (NEW.measurement_type = 'hypervisor') THEN
                    UPDATE tally_snapshots SET
                        hypervisor_cores = NEW.cores,
                        hypervisor_instance_count = NEW.instance_count,
                        hypervisor_sockets = NEW.sockets
                    WHERE id = NEW.snapshot_id;
                ELSE
                    RAISE EXCEPTION 'Unknown measurement_type %', NEW.measurement_type;
                END IF;

                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
        </createProcedure>

        <rollback>
            DROP FUNCTION copy_measurement();
        </rollback>
    </changeSet>

    <changeSet id="202001141534-6" author="awood" dbms="postgresql">
        <sql>
            CREATE TRIGGER maintain_measurement_columns_insert BEFORE INSERT ON hardware_measurements FOR EACH
            ROW EXECUTE PROCEDURE copy_measurement();

            CREATE TRIGGER maintain_measurement_columns_update BEFORE UPDATE ON hardware_measurements FOR EACH
            ROW EXECUTE PROCEDURE copy_measurement();
        </sql>
        <rollback>
            DROP TRIGGER maintain_measurement_column_insert ON hardware_measurements;
            DROP TRIGGER maintain_measurement_column_update ON hardware_measurements;
        </rollback>
    </changeSet>

</databaseChangeLog>
<!-- vim: set expandtab sts=4 sw=4 ai: -->
