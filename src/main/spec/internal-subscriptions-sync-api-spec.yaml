openapi: "3.0.2"
info:
  title: "internal-subscriptions-sync-api"
  description: "REST interface for the internal-subscriptions-sync- service. Please note any deprecated APIs. Our current deprecation policy is to keep deprecated APIs around for at least 6 months."
  version: 1.0.0

servers:
  - url: /{PATH_PREFIX}/{APP_NAME}/v1
    variables:
      PATH_PREFIX:
        default: api
      APP_NAME:
        default: rhsm-subscriptions
  - url: https://{HOSTNAME}/{PATH_PREFIX}/{APP_NAME}/v1
    variables:
      HOSTNAME:
        enum:
          - ci.cloud.redhat.com
          - qa.cloud.redhat.com
          - stage.cloud.redhat.com
          - cloud.redhat.com
        default: ci.cloud.redhat.com
      PATH_PREFIX:
        default: api
      APP_NAME:
        default: rhsm-subscriptions

paths:
  /internal/subscriptions:
    description: Save subscriptions manually. Supported only in dev-mode.
    post:
      operationId: saveSubscriptions
      tags:
        - internalSubscriptions
      parameters:
        - name: reconcileCapacity
          in: query
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: Save a list of subscriptions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubscriptionResponse"
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
  /internal/rpc/subscriptions/sync:
    description: Enqueue all sync-enabled orgs to sync their subscriptions with upstream
    put:
      summary: Enqueue all sync-enabled orgs to sync their subscriptions with upstream
      operationId: syncAllSubscriptions
      tags:
        - internalSubscriptions
      responses:
        '200':
          description: The request for syncing all subscriptions is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
  /internal/subscriptions/sync/org/{org_id}:
    description: "Force sync of subscriptions for given org_id."
    parameters:
      - name: org_id
        in: path
        required: true
        schema:
          type: string
        description: "The ID for the organization subscriptions to sync"
    put:
      summary: "Sync all subscriptions for given org_id."
      operationId: forceSyncSubscriptionsForOrg
      tags:
        - internalSubscriptions
      responses:
        '202':
          description: "The request for syncing organization's subscription is processing."
          content:
            text/plain:
              schema:
                type: string
                example: Sync started.
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
  /internal/subscriptions/prune:
    description: Remove subscription and capacity records that are in the denylist.
    delete:
      summary: Remove subscription and capacity records that are in the denylist.
      operationId: pruneUnlistedSubscriptions
      tags:
        - internalSubscriptions
      responses:
        '200':
          description: Prune of unlisted subscriptions is successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultResponse"
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"

  /internal/subscriptions/rhmUsageContext:
    description: "Get the Red Hat Marketplace usage context."
    parameters:
      - name: accountNumber
        in: query
        required: false
        schema:
          type: string
        description: "Customer's Account Number"
      - name: orgId
        in: query
        required: true
        schema:
          type: string
        description: "Customer's Org Id"
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: productId
        in: query
        required: true
        schema:
          type: string
      - name: sla
        in: query
        schema:
          type: string
      - name: usage
        in: query
        schema:
          type: string
    get:
      summary: "Lookup necessary info to submit a usage record to RHM"
      operationId: getRhmUsageContext
      responses:
        '200':
          description: "Found RHM usage context matching the criteria."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RhmUsageContext'
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
      tags:
        - internalSubscriptions
  /internal/subscriptions/awsUsageContext:
    description: "Get AWS usage context."
    parameters:
      - name: accountNumber
        in: query
        required: false
        schema:
          type: string
        description: "Customer's Account Number"
      - name: orgId
        in: query
        required: true
        schema:
          type: string
        description: "Customer's Org Id"
      - name: date
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: productId
        in: query
        required: true
        schema:
          type: string
      - name: sla
        in: query
        schema:
          type: string
      - name: usage
        in: query
        schema:
          type: string
      - name: awsAccountId
        in: query
        schema:
          type: string
    get:
      summary: "Lookup necessary info to submit a usage record to AWS"
      operationId: getAwsUsageContext
      responses:
        '200':
          description: "Found AWS usage context matching the criteria."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwsUsageContext'
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
      tags:
        - internalSubscriptions
  /internal/offerings/{sku}/product_tags:
    description: "Mapping sku to product tags."
    parameters:
      - name: sku
        in: path
        required: true
        schema:
          type: string
    get:
      summary: "Lookup product tags by sku"
      operationId: getSkuProductTags
      responses:
        '200':
          description: "The request to get product tags by sku ."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferingProductTags'
              example:
                data:
                  - Rho one
                  - Rho two
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
      tags:
        - internalSubscriptions
  /internal/tags/{tag}/metrics:
    description: "Mapping sku to product tags."
    parameters:
      - name: tag
        in: path
        required: true
        schema:
          type: string
    get:
      summary: "Lookup metrics tags by tag"
      operationId: getTagMetrics
      responses:
        '200':
          description: "The request to get product tags by sku ."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagMetric'
              example:
                data:
                  - metric_id: foo
                    aws_dimension: foo1
                    billing_factor: 0.25
                  - metric_id: bar
                    aws_dimension: bar1
                    billing_factor: 1.0
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
      tags:
        - internalSubscriptions
  /internal/rpc/offerings/sync/{sku}:
    description: Sync an offering from the upstream source.
    parameters:
      - name: sku
        in: path
        required: true
        schema:
          type: string
    put:
      summary: Sync an offering from the upstream source.
      operationId: syncOffering
      responses:
        '200':
          description: Sync for offering sku
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferingResponse"
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
      tags:
        - internalSubscriptions
  /internal/rpc/offerings/sync:
    description: Syncs all offerings not listed in deny list from the upstream source.
    put:
      summary: Syncs all offerings not listed in deny list from the upstream source.
      operationId: syncAllOfferings
      tags:
        - internalSubscriptions
      responses:
        '200':
          description: Enqueued offerings to be synced.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferingResponse"
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
  /internal/rpc/offerings/reconcile/{sku}:
    description: Reconcile capacity for an offering from the upstream source.
    parameters:
      - name: sku
        in: path
        required: true
        schema:
          type: string
    put:
      summary: Reconcile capacity for an offering from the upstream source.
      operationId: forceReconcileOffering
      responses:
        '200':
          description: Capacity Reconciliation for offering sku successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferingResponse"
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
      tags:
        - internalSubscriptions
  /internal/subscriptions/terminate/{subscription_id}:
    description: "Terminate a subscription with a given end date."
    parameters:
      - name: subscription_id
        in: path
        required: true
        schema:
          type: string
        description: "Subscription ID to terminate."
    post:
      operationId: terminateSubscription
      summary: "Terminate a subscription."
      parameters:
        - name: timestamp
          description: "The termination timestamp to use."
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: "The termination request was successful"
          content:
            application/vnd.api+json:
              schema:
                $ref: "#/components/schemas/TerminationRequest"
        '400':
          $ref: "../../../spec/error-responses.yaml#/$defs/BadRequest"
        '403':
          $ref: "../../../spec/error-responses.yaml#/$defs/Forbidden"
        '404':
          $ref: "../../../spec/error-responses.yaml#/$defs/ResourceNotFound"
        '500':
          $ref: "../../../spec/error-responses.yaml#/$defs/InternalServerError"
      tags:
        - internalSubscriptions
  /internal-subscription-sync-openapi.json:
    $ref: "../../../spec/openapi-paths.yaml#/openapi-json"
  /internal-subscription-sync-openapi.yaml:
    $ref: "../../../spec/openapi-paths.yaml#/openapi-yaml"

components:
  schemas:
    RhmUsageContext:
      description: Encapsulates all data needed to map tally snapshot usage to AWS UsageRecords.
      properties:
        rhSubscriptionId:
          type: string
    AwsUsageContext:
      description: Encapsulates all data needed to map tally snapshot usage to AWS UsageRecords.
      properties:
        rhSubscriptionId:
          type: string
        customerId:
          type: string
        productCode:
          type: string
        awsSellerAccountId:
          type: string
        subscriptionStartDate:
          type: string
          format: date-time
    OfferingProductTags:
      properties:
        data:
          type: array
          items:
            type: string
    TagMetric:
      properties:
        metric_id:
          type: string
        aws_dimension:
          type: string
        billing_factor:
          type: number
          format: double
    TerminationRequest:
      properties:
        data:
          type: object
          properties:
            termination_message:
              type: string
    DefaultResponse:
      properties:
        status:
          type: string
    SubscriptionResponse:
      properties:
        detail:
          type: string
    OfferingResponse:
      properties:
        detail:
          type: string
  securitySchemes:
    PskIdentity:
      type: apiKey
      in: header
      name: x-rh-swatch-psk
      description: |
        Psk header containing Pre Shared Key. Contains an
        UUID string:
        ```
        c9a98753-2092-4617-b226-5c2653330b3d
        ```

security:
  - PskIdentity: []
