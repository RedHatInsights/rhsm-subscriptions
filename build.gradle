buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:4.0.1"
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "checkstyle"
    id "jacoco"
    id "org.sonarqube" version "2.7"
    id "org.springframework.boot" version "2.0.8.RELEASE"
    id "net.researchgate.release" version "2.6.0"
    id "GitProperties"
}


ext {
    swagger_annotations_version = "1.5.21"
    swagger_ui_version = "3.20.8"
    prometheus_version = "1.1.2"
    resteasy_version = "3.6.2.Final"
    spring_boot_version = "2.1.6.RELEASE"
    spring_data_releasetrain = "Lovelace-SR9"
    postgres_jdbc_driver_version = "42.2.5"
    junit_version = "5.3.2"
    mockito_version = "2.23.4"
    hamcrest_version = "2.1"
    jboss_jaxrs_api_version = "1.0.2.Final"
    resteasy_spring_boot_starter_version = "3.0.0.Final"
    logstash_logback_encoder_version = "5.3"
    aws_sdk_version = "1.11.32"
    snakeyaml_version = "1.25"
}


allprojects {
    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"

    // Define all versions here so that all projects will use the same versions.
    dependencyManagement {
        imports {
            // See https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies to
            // get listings of the contents of this BOM
            mavenBom "org.springframework.boot:spring-boot-dependencies:$spring_boot_version"
            mavenBom "org.springframework.data:spring-data-releasetrain:$spring_data_releasetrain"
        }
        dependencies{
            dependency "org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec:$jboss_jaxrs_api_version"
            dependency "io.swagger:swagger-annotations:$swagger_annotations_version"
            dependency "io.micrometer:micrometer-registry-prometheus:$prometheus_version"
            dependency "org.webjars:swagger-ui:$swagger_ui_version"
            dependency "net.logstash.logback:logstash-logback-encoder:$logstash_logback_encoder_version"
            dependency "org.hamcrest:hamcrest:$hamcrest_version"
            dependency "org.postgresql:postgresql:$postgres_jdbc_driver_version"
            dependency "org.jboss.resteasy:resteasy-spring-boot-starter:$resteasy_spring_boot_starter_version"
            dependency "com.j256.cloudwatchlogbackappender:cloudwatchlogbackappender:1.11"
            dependency "com.amazonaws:aws-java-sdk-logs:$aws_sdk_version"
            dependency "com.amazonaws:aws-java-sdk-ec2:$aws_sdk_version"
            dependency "org.yaml:snakeyaml:$snakeyaml_version"
            dependencySet(group: "org.jboss.resteasy", version: "$resteasy_version") {
                entry "resteasy-client"
                entry "resteasy-multipart-provider"
                entry "resteasy-validator-provider-11"
            }
            dependencySet(group: "org.junit.jupiter", version: "$junit_version") {
                entry "junit-jupiter-api"
                entry "junit-jupiter-engine"
            }
            dependencySet(group: "org.mockito", version: "$mockito_version") {
                entry "mockito-core"
                entry "mockito-junit-jupiter"
            }
        }
    }

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-parameters'
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    checkstyle {
        toolVersion "8.16"
    }

    group = "org.candlepin"

    dependencies {
        testCompile "org.springframework.boot:spring-boot-test"
        testCompile "org.springframework:spring-test"

        // We use JUnit 5 which the spring-boot-starter-test doesn't provide
        testCompile "org.junit.jupiter:junit-jupiter-api"
        testCompile "org.mockito:mockito-core"
        testCompile "org.mockito:mockito-junit-jupiter"
        testCompile "org.hamcrest:hamcrest"

        testRuntime "org.junit.jupiter:junit-jupiter-engine"
        testRuntime "ch.qos.logback:logback-classic"
    }
}

bootJar {
    mainClassName = "org.candlepin.subscriptions.BootApplication"
}

springBoot {
    buildInfo {
        properties {
            // Leave time empty: The default value is the instant at which the project is built. A
            // side-effect is the task will never be up-to-date. As a result, builds will take longer.  See
            // https://docs.spring.io/spring-boot/docs/2.1.4.RELEASE/gradle-plugin/reference/html/#integrating-with-actuator
            time = null
            additional = [
                    'gitDescription': "${project.git.description ?: ''}",
                    'gitHash': "${project.git.hash ?: ''}",
            ]
        }
    }
}

release {
    // Use single quotes so the variables aren't interpreted in the build file itself!
    tagTemplate = '${name}-${version}'
    preTagCommitMessage = '[Subscriptions Release] - pre tag commit: '
    tagCommitMessage = '[Subscriptions Release] - creating tag: '
    newVersionCommitMessage = '[Subscriptions Release] - version bump: '
    git {
        pushToRemote = false
    }
}

dependencies {
    // Generates configuration metadata that IntelliJ can use
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    compile project(":api")
    compile project(":insights-inventory-client")

    // This starter pulls in Spring Boot versions that we don't want.  The actual classes that we need are
    // baked into the starter artifact itself which is peculiar but sometimes that's how the cookie crumbles.
    compile("org.jboss.resteasy:resteasy-spring-boot-starter") {
        exclude group: "org.springframework.boot"
    }
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework:spring-context-support"

    compile "net.logstash.logback:logstash-logback-encoder"
    compile "io.micrometer:micrometer-registry-prometheus"
    compile "org.liquibase:liquibase-core"
    compile "org.webjars:swagger-ui"
    compile "org.springframework.boot:spring-boot-starter-quartz"
    compile "org.yaml:snakeyaml"

    testCompile "org.springframework.security:spring-security-test"

    runtime "org.postgresql:postgresql"
    runtime("org.jboss.resteasy:resteasy-validator-provider-11") {
        exclude group: 'org.hibernate' // exclude older hibernate validator
    }

    runtime "org.hsqldb:hsqldb"
    runtime "com.j256.cloudwatchlogbackappender:cloudwatchlogbackappender"
}

compileJava.dependsOn(processResources)

project(":api") {
    apply plugin: "org.openapi.generator"

    // This project should only contain generated code.  No point in running checkstyle
    checkstyle.sourceSets = []

    ext {
        api_spec_path = "${projectDir}/rhsm-subscriptions-api-spec.yaml"
        config_file = "${projectDir}/rhsm-subscriptions-api-config.json"
    }

    openApiGenerate {
      generatorName = "jaxrs-spec"
      inputSpec = api_spec_path
      configFile = config_file
      outputDir = "$buildDir/generated"
      configOptions = [
          interfaceOnly: true,
          generatePom: false,
          dateLibrary: "java8",
      ]
    }

    openApiValidate {
        inputSpec = api_spec_path
    }

    task generateApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        generatorName = "html"
        inputSpec = api_spec_path
        outputDir = "$buildDir/docs"
        generateApiDocumentation = true
        generateModelDocumentation = true
        generateModelTests = false
        generateApiTests = false
        withXml = false
    }

    task generateOpenApiJson(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        generatorName = "openapi"
        inputSpec = api_spec_path
        outputDir = "$buildDir/generated"
        generateApiDocumentation = true
        generateModelDocumentation = true
        generateModelTests = false
        generateApiTests = false
        withXml = false
    }

    processResources {
        from "$buildDir/generated/openapi.json"
        from api_spec_path
        rename { String fileName ->
            api_spec_path.endsWith(fileName) ? 'openapi.yaml' : fileName  // rename yaml to openapi.yaml
        }
    }

    dependencies {
        compile "com.fasterxml.jackson.core:jackson-annotations"
        compile "javax.validation:validation-api"
        compile "org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec"
        compile "io.swagger:swagger-annotations"
    }

    sourceSets.main.java.srcDirs = ["${buildDir}/generated/src/gen/java"]
    compileJava.dependsOn tasks.openApiGenerate
    processResources.dependsOn tasks.generateOpenApiJson
}

project(":insights-inventory-client") {
    apply plugin: "org.openapi.generator"

    // This project should only contain generated code.  No point in running checkstyle
    checkstyle.sourceSets = []

    ext {
        api_spec_path = "https://raw.githubusercontent.com/RedHatInsights/insights-host-inventory/master/swagger/api.spec.yaml"
        config_file = "${projectDir}/insights-inventory-client-config.json"
    }

    openApiValidate {
        inputSpec = api_spec_path
    }

    task generateApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        generatorName = "html"
        inputSpec = api_spec_path
        outputDir = "$buildDir/docs"
        generateApiDocumentation = true
        generateModelDocumentation = true
        generateModelTests = false
        generateApiTests = false
        withXml = false
    }

    openApiGenerate {
        inputSpec = api_spec_path
        configFile = config_file
        outputDir = "${buildDir}/generated"
        generatorName = "java"
        configOptions = [
            generatePom: false,
            library: "resteasy",
            java8: true,
            dateLibrary: "java8"
        ]
    }

    dependencies {
        compile "org.jboss.resteasy:resteasy-client"
        compile "org.jboss.resteasy:resteasy-multipart-provider"

        compile "com.fasterxml.jackson.core:jackson-annotations"
        compile "com.fasterxml.jackson.core:jackson-databind"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

        compile "org.springframework:spring-context"
        compile "org.slf4j:slf4j-api"
        compile "io.swagger:swagger-annotations"
    }

    sourceSets.main.java.srcDirs += "${buildDir}/generated/src/main/java"

    compileJava.dependsOn tasks.openApiGenerate
}
