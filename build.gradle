import groovy.json.JsonOutput

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:5.0.1"
        classpath "org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.0.2"
        classpath "de.undercouch:gradle-download-task:4.1.1"
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "checkstyle"
    id "jacoco"
    id "org.sonarqube" version "3.1.1"
    id "org.springframework.boot" version "2.4.3"
    id "net.researchgate.release" version "2.8.1"
    id "GitProperties"
    id 'com.adarshr.test-logger' version '2.1.1'
    // Only applied for the rhsm-subscriptions-kafka sub project; applied below.
    id "com.commercehub.gradle.plugin.avro-base" version "0.9.1" apply false
}


ext {
    swagger_annotations_version = "1.6.2"
    swagger_ui_version = "3.43.0"
    resteasy_version = "3.6.3.Final"
    spring_boot_version = "2.4.3"
    jboss_jaxrs_api_version = "1.0.2.Final"
    resteasy_spring_boot_starter_version = "3.0.0.Final"
    kafka_avro_serializer_version = "6.1.0"
    avro_version = "1.10.1"
    webjars_locator_version = "0.40"
}

allprojects {
    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"

    // Define all versions here so that all projects will use the same versions.
    dependencyManagement {
        imports {
            // See https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies to
            // get listings of the contents of this BOM
            mavenBom "org.springframework.boot:spring-boot-dependencies:$spring_boot_version"
        }
        dependencies{
            dependency "org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec:$jboss_jaxrs_api_version"
            dependency "io.swagger:swagger-annotations:$swagger_annotations_version"
            dependency "org.webjars:swagger-ui:$swagger_ui_version"
            dependency "org.webjars:webjars-locator:$webjars_locator_version"
            dependency "org.jboss.resteasy:resteasy-spring-boot-starter:$resteasy_spring_boot_starter_version"
            dependencySet(group: "org.jboss.resteasy", version: "$resteasy_version") {
                entry "resteasy-client"
                entry "resteasy-multipart-provider"
                entry "resteasy-validator-provider-11"
            }
            dependency "io.confluent:kafka-avro-serializer:$kafka_avro_serializer_version"
            dependency "org.apache.avro:avro:$avro_version"
            dependency "io.hawt:hawtio-springboot:2.13.0"
        }
    }

    sourceCompatibility = "11"
    targetCompatibility = "11"

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-parameters'
    }

    repositories {
        mavenCentral()
        maven { url "http://packages.confluent.io/maven/" }
    }

    test {
        useJUnitPlatform()
    }

    checkstyle {
        toolVersion "8.16"
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    group = "org.candlepin"

    dependencies {
        implementation 'javax.annotation:javax.annotation-api:1.3.2'

        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"
        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"

        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.springframework:spring-test"

        // We use JUnit 5 which the spring-boot-starter-test doesn't provide
        testCompile "org.junit.jupiter:junit-jupiter-api"
        testCompile "org.junit.jupiter:junit-jupiter-params"
        testCompile "org.mockito:mockito-core"
        testCompile "org.mockito:mockito-junit-jupiter"
        testCompile "org.hamcrest:hamcrest"

        testRuntime "org.junit.jupiter:junit-jupiter-engine"
        testRuntime "ch.qos.logback:logback-classic"
    }
}

apply plugin: 'jsonschema2pojo'
jsonSchema2Pojo {
    source = files("${projectDir}/schemas")
    targetPackage = 'org.candlepin.subscriptions.json'
    includeAdditionalProperties = false
    includeJsr303Annotations = true
    initializeCollections = false
    dateTimeType = 'java.time.OffsetDateTime'
    sourceType = 'yamlschema'
    generateBuilders = true
    includeGetters = true
    includeSetters = true
}

bootJar {
    mainClassName = "org.candlepin.subscriptions.BootApplication"
}

springBoot {
    buildInfo {
        properties {
            // Leave time empty: The default value is the instant at which the project is built. A
            // side-effect is the task will never be up-to-date. As a result, builds will take longer.  See
            // https://docs.spring.io/spring-boot/docs/2.1.4.RELEASE/gradle-plugin/reference/html/#integrating-with-actuator
            time = null
            additional = [
                    'gitDescription': "${project.git.description ?: ''}",
                    'gitHash': "${project.git.hash ?: ''}",
            ]
        }
    }
}

release {
    // Use single quotes so the variables aren't interpreted in the build file itself!
    tagTemplate = '${name}-${version}'
    preTagCommitMessage = '[Subscriptions Release] - pre tag commit: '
    tagCommitMessage = '[Subscriptions Release] - creating tag: '
    newVersionCommitMessage = '[Subscriptions Release] - version bump: '
    pushReleaseVersionBranch = 'main'
    git {
        requireBranch = /develop|hotfix.*/
        pushToRemote = false
    }
}

dependencies {
    // Generates configuration metadata that IntelliJ can use
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    // For the LiveReload feature of spring boot as long as IntelliJ is set to build/make automatically on
    // code changes
    compile('org.springframework.boot:spring-boot-devtools')

    compile project(":api")
    compile project(":insights-inventory-client")
    compile project(":rhsm-client")
    compile project(":cloudigrade-client")
    compile project(":rbac-client")
    compile project(":subscription-client")
    compile project(":marketplace-client")
    compile project(":prometheus-client")
    compile project(":kafka-schema")

    // This starter pulls in Spring Boot versions that we don't want.  The actual classes that we need are
    // baked into the starter artifact itself which is peculiar but sometimes that's how the cookie crumbles.
    compile("org.jboss.resteasy:resteasy-spring-boot-starter") {
        exclude group: "org.springframework.boot"
    }
    compile("io.confluent:kafka-avro-serializer") {
        exclude group: "org.apache.kafka"
        // A transitive dependency, org.apache.zookeeper:zookeeper, includes log4j as well as slf4j.  We use
        // logback and SLF4J issues a warning if more than one logging implementation is on the classpath.
        // Frowny face to Zookeeper for adding a logging implementation to a library jar.
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }

    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.retry:spring-retry"
    compile "org.springframework:spring-context-support"
    compile "org.springframework.kafka:spring-kafka"

    compile "io.micrometer:micrometer-registry-prometheus"
    compile "org.liquibase:liquibase-core"
    compile "org.webjars:swagger-ui"
    compile "org.webjars:webjars-locator"
    compile "org.yaml:snakeyaml"
    compile "org.postgresql:postgresql"
    compile "io.hawt:hawtio-springboot"
    compile "org.hibernate.validator:hibernate-validator"

    testCompile "org.springframework.security:spring-security-test"
    testCompile "org.springframework.kafka:spring-kafka-test"

    runtime("org.jboss.resteasy:resteasy-validator-provider-11") {
        exclude group: 'org.hibernate' // exclude older hibernate validator
    }

    runtime "org.hsqldb:hsqldb"
    runtime "org.jolokia:jolokia-core"
}

// Add a custom task to output dependency info in a machine parseable format. Used to generate dependency
// reports for Product Security.
// adapted from https://stackoverflow.com/a/34641632
// easiest to use via `./gradlew -q dependencyJson`
tasks.register('dependencyJson') {
    println JsonOutput.toJson(project.configurations.runtime.incoming.resolutionResult.allDependencies.collect { dependency ->
        ModuleVersionIdentifier artifact = dependency.selected.moduleVersion
        ComponentIdentifier dependent = dependency.from.id
        [
            group: artifact.group,
            name: artifact.name,
            version: artifact.version,
            dependent: dependent.displayName, // by collecting dependents, we can determine transitivity.
            displayName: dependency.requested.displayName, // displayName starts with "project " for subprojects
        ]
    }.groupBy {
        [
            group: it.group,
            name: it.name,
            version: it.version,
        ]
    }.collect { artifactId, artifactInstances ->
        artifactId + [
            displayNames: artifactInstances.collect { it.displayName }.unique().sort(),
            dependents: artifactInstances.collect { it.dependent },
        ]
    }.sort { "${it.group}:${it.name}:${it.version}" })
}

compileJava.dependsOn(processResources)
project.tasks["sonarqube"].dependsOn "test"
project.tasks["sonarqube"].dependsOn "jacocoTestReport"

project(":api") {
    apply plugin: "org.openapi.generator"

    // This project should only contain generated code.  No point in running checkstyle
    checkstyle.sourceSets = []

    ext {
        api_spec_path = "${projectDir}/rhsm-subscriptions-api-spec.yaml"
        config_file = "${projectDir}/rhsm-subscriptions-api-config.json"
    }

    openApiGenerate {
      generatorName = "jaxrs-spec"
      inputSpec = api_spec_path
      configFile = config_file
      outputDir = "$buildDir/generated"
      configOptions = [
          interfaceOnly: "true",
          generatePom: "false",
          dateLibrary: "java8",
      ]
    }

    openApiValidate {
        inputSpec = api_spec_path
    }

    task generateApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        generatorName = "html"
        inputSpec = api_spec_path
        outputDir = "$buildDir/docs"
        generateApiDocumentation = true
        generateModelDocumentation = true
        generateModelTests = false
        generateApiTests = false
        withXml = false
    }

    task generateOpenApiJson(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        generatorName = "openapi"
        inputSpec = api_spec_path
        outputDir = "$buildDir/generated/openapijson"
        generateApiDocumentation = true
        generateModelDocumentation = true
        generateModelTests = false
        generateApiTests = false
        withXml = false
    }

    processResources {
        from "$buildDir/generated/openapijson/openapi.json"
        from api_spec_path
        rename { String fileName ->
            api_spec_path.endsWith(fileName) ? 'openapi.yaml' : fileName  // rename yaml to openapi.yaml
        }
    }

    dependencies {
        compile "com.fasterxml.jackson.core:jackson-annotations"
        compile "javax.validation:validation-api"
        compile "org.jboss.spec.javax.ws.rs:jboss-jaxrs-api_2.1_spec"
        compile "io.swagger:swagger-annotations"
        compile "com.google.code.findbugs:jsr305:3.0.2"
        compile "org.openapitools:jackson-databind-nullable:0.2.1"
    }

    sourceSets.main.java.srcDirs = ["${buildDir}/generated/src/gen/java"]
    compileJava.dependsOn tasks.openApiGenerate
    processResources.dependsOn tasks.generateOpenApiJson
}

project(":insights-inventory-client") {
    apply plugin: "org.openapi.generator"
    apply plugin: "de.undercouch.download"

    ext {
        api_spec_path = "${buildDir}/api.spec.yaml"
        config_file = "${projectDir}/insights-inventory-client-config.json"
    }

    // work around https://github.com/OpenAPITools/openapi-generator/issues/8255 by downloading the spec manually
    task downloadSpec(type: Download) {
        src 'https://raw.githubusercontent.com/RedHatInsights/insights-host-inventory/075f8e4433ecfb2e227e02108096847242e14e19/swagger/api.spec.yaml'
        dest buildDir
        overwrite false
    }

    task downloadSystemProfileSpec(type: Download) {
        src 'https://raw.githubusercontent.com/RedHatInsights/insights-host-inventory/d479778d9ae72fea9a493429ea44142364648ec5/swagger/system_profile.spec.yaml'
        dest buildDir
        overwrite false
    }

    tasks.openApiGenerate.dependsOn downloadSpec
    tasks.openApiGenerate.dependsOn downloadSystemProfileSpec

    dependencies {
        compileOnly 'org.springframework.boot:spring-boot'
    }
}

project(":rhsm-client") {
    apply plugin: "org.openapi.generator"

    ext {
        api_spec_path = "${projectDir}/rhsm-client-spec.yaml"
        config_file = "${projectDir}/rhsm-client-config.json"
    }

    dependencies {
        testCompile "com.github.tomakehurst:wiremock-jre8:2.27.2"
    }
}

project(":rbac-client") {
    apply plugin: "org.openapi.generator"
    apply plugin: "de.undercouch.download"

    ext {
        api_spec_path = "${buildDir}/openapi.json"
        config_file = "${projectDir}/rbac-client-config.json"
    }

    // work around https://github.com/OpenAPITools/openapi-generator/issues/8255 by downloading the spec manually
    task downloadSpec(type: Download) {
        src 'https://raw.githubusercontent.com/RedHatInsights/insights-rbac/stable/docs/source/specs/openapi.json'
        dest buildDir
        overwrite false
    }

    tasks.openApiGenerate.dependsOn downloadSpec

    dependencies {
        compileOnly "org.springframework:spring-web"
        compileOnly "javax.servlet:javax.servlet-api"
    }
}

project(":cloudigrade-client") {
    apply plugin: "org.openapi.generator"

    ext {
        api_spec_path = "${projectDir}/cloudigrade-api-spec.yaml"
        config_file = "${projectDir}/cloudigrade-client-config.json"
    }
}

project(":subscription-client") {
    apply plugin: "org.openapi.generator"

    ext {
        api_spec_path = "${projectDir}/subscription-api-spec.yaml"
        config_file = "${projectDir}/subscription-client-config.json"
    }
}

project(":marketplace-client") {
    apply plugin: "org.openapi.generator"

    ext {
        api_spec_path = "${projectDir}/marketplace-api-spec.yaml"
        config_file = "${projectDir}/marketplace-client-config.json"
    }

    dependencies {
        compileOnly "org.springframework:spring-web"
        compileOnly "javax.servlet:javax.servlet-api"
    }
}

project(":prometheus-client") {
    apply plugin: "org.openapi.generator"

    ext {
        api_spec_path = "${projectDir}/prometheus-query-api-spec.yaml"
        config_file = "${projectDir}/prometheus-client-config.json"
    }
}

configure(subprojects.findAll { it.name in ["cloudigrade-client", 'rbac-client', 'rhsm-client',
                                            'insights-inventory-client', 'subscription-client',
                                            'marketplace-client', 'prometheus-client']}) {
    apply plugin: "org.openapi.generator"
    apply plugin: "checkstyle"

    // These projects should only contain generated code.  No point in running checkstyle.
    checkstyle.sourceSets = []

    openApiValidate {
        inputSpec = api_spec_path
    }

    task generateApiDocs(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
        generatorName = "html"
        inputSpec = api_spec_path
        outputDir = "$buildDir/docs"
        generateApiDocumentation = true
        generateModelDocumentation = true
        generateModelTests = false
        generateApiTests = false
        withXml = false
    }

    openApiGenerate {
        inputSpec = api_spec_path
        configFile = config_file
        outputDir = "${buildDir}/generated"
        generatorName = "java"
        configOptions = [
                generatePom: "false",
                library: "resteasy",
                java8: "true",
                dateLibrary: "java8"
        ]
    }

    dependencies {
        compile "org.jboss.resteasy:resteasy-client"
        compile "org.jboss.resteasy:resteasy-multipart-provider"

        compile "com.fasterxml.jackson.core:jackson-annotations"
        compile "com.fasterxml.jackson.core:jackson-databind"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

        compile "org.springframework:spring-context"
        compile "org.slf4j:slf4j-api"
        compile "io.swagger:swagger-annotations"
        compile "com.google.code.findbugs:jsr305:3.0.2"
        compile "org.openapitools:jackson-databind-nullable:0.2.1"
    }

    sourceSets.main.java.srcDirs += "${buildDir}/generated/src/main/java"

    compileJava.dependsOn tasks.openApiGenerate
}

project(":kafka-schema") {
    apply plugin: "com.commercehub.gradle.plugin.avro-base"

    dependencies {
        compile "org.apache.avro:avro"
    }

    task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
        // sub dir needed so that the plugin does not traverse into the build dir (if it exists).
        source("${projectDir}/avro")
        outputDir = file("${buildDir}/generated/avro/src/main/java")
    }

    sourceSets.main.java.srcDirs += "${buildDir}/generated/avro/src/main/java"
    compileJava.source(generateAvro.outputs)
    compileJava.dependsOn tasks.generateAvro
}
