name: PR Validation ‚Äì Pre-Container

on:
  push:
    branches: [main, hotfix]
  pull_request:
    branches: [main, hotfix]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ACTIONS_STEP_DEBUG: true

jobs:
  validate-format:
    name: Validate Format
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-includes: |
            buildSrc/.gradle
            buildSrc/build

      - name: Run Spotless & Checkstyle
        id: run-lint
        run: |
          ./gradlew --no-daemon --no-parallel spotlessCheck checkstyleMain checkstyleTest || exit_code=$?
          echo "exit_code=${exit_code:-0}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Upload Checkstyle Report
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: '**/build/reports/checkstyle'

      - name: Fail job if lint failed
        if: steps.run-lint.outputs.exit_code != '0'
        run: |
          echo "‚ùå Lint failed ‚Äî marking job as failed."
          exit 1

  validate-floorplan-queries:
    name: Validate FloorPlan Queries
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Git config
        run: |
          git config --global user.name "$(git log -1 --pretty=format:'%an')"
          git config --global user.email "$(git log -1 --pretty=format:'%ae')"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-includes: |
            buildSrc/.gradle
            buildSrc/build

      - name: Setup JBang
        uses: jbangdev/setup-jbang@main

      - name: Setup yamlpath
        run: |
          jbang trust add https://github.com/yaml-path/jbang/
          curl -Ls https://sh.jbang.dev | bash -s - app install --fresh --force yamlpath@yaml-path/jbang

      - name: Setup PostgreSQL DB
        run: docker run -d -v ./init_dbs.sh:/usr/share/container-scripts/postgresql/start/set_passwords.sh:z -p 5432:5432 -e POSTGRESQL_ADMIN_PASSWORD=admin quay.io/centos7/postgresql-13-centos7:centos7

      - name: Setup PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Execute migrations
        id: run-migrations
        run: |
          ./gradlew --no-daemon --no-parallel :liquibaseUpdate || exit_code=$?
          echo "exit_code=${exit_code:-0}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Run FloorPlan Query Validation
        run: |
          QUERY_NAMES=$(yamlpath --format=PLAIN --single --expression="objects.(kind==FloorPlan).spec.queries.prefix" swatch-tally/deploy/clowdapp.yaml | tail -c +2 | head -c -2)
          for rawQueryName in ${QUERY_NAMES[*]}; do
            queryName=$(echo $rawQueryName | sed 's/,//g')
            query=$(yamlpath --format=PLAIN --single --expression="objects.(kind==FloorPlan).spec.queries.(prefix == $queryName).query" swatch-tally/deploy/clowdapp.yaml | sed 's/;//g')
            echo -e "Validating query: \n$query\n"
            output=$(PGPASSWORD=rhsm-subscriptions psql -h localhost -U rhsm-subscriptions -d rhsm-subscriptions -c "$query;")
            if [[ "$output" != *"(0 rows)"* ]]; then
              echo -e "Error in query. Check the output for more information: \n$output"
              exit 1
            fi
          done
          echo "Queries validation was successful"

      - name: Fail job if migrations failed
        if: steps.run-migrations.outputs.exit_code != '0'
        run: |
          echo "‚ùå Liquibase migration failed ‚Äî marking job as failed."
          exit 1

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-includes: |
            buildSrc/.gradle
            buildSrc/build

      - name: Run Gradle Build
        id: run-build
        env:
          GRADLE_OPTS: "-Xmx2g -Xms512m"
        run: |
          ./gradlew --no-daemon --no-parallel build -x test || exit_code=$?
          echo "exit_code=${exit_code:-0}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Fail job if build failed
        if: steps.run-build.outputs.exit_code != '0'
        run: |
          echo "‚ùå Build task failed ‚Äî marking job as failed."
          exit 1

      - name: Upload Build Artifacts
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/build/libs/*.jar
            **/build/distributions/*

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Set up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-includes: |
            buildSrc/.gradle
            buildSrc/build

      - name: Run Tests
        id: run-tests
        env:
          GRADLE_OPTS: "-Xmx4g -Xms512m"
        run: |
          ./gradlew --no-daemon test || exit_code=$?
          ./gradlew --no-daemon --no-parallel testCodeCoverageReport
          echo "exit_code=${exit_code:-0}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Upload Code Coverage
        if: ${{ always() && (hashFiles('**/build/reports/jacoco/testCodeCoverageReport/**') != '') }}
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: '**/build/reports/jacoco/testCodeCoverageReport/**'

      - name: Upload JUnit Report
        if: ${{ always() && (hashFiles('**/build/reports/tests/test/TEST-*.xml') != '') }}
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: '**/build/reports/tests/test'

      - name: Publish Test Results
        if: github.actor != 'dependabot[bot]' && always() && (hashFiles('**/build/test-results/test/TEST-*.xml') != '')
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: '**/build/test-results/test/TEST-*.xml'
          check_name: 'JUnit Tests'
          comment_mode: off
          fail_on: 'errors'
          include_passed: false
          include_skipped: true
          report_individual_runs: true

      - name: Fail job if tests failed
        if: steps.run-tests.outputs.exit_code != '0'
        run: |
          echo "‚ùå Test task failed ‚Äî marking job as failed."
          exit 1
  summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [validate-format, validate-floorplan-queries, build, test]
    if: always()

    steps:
      - name: Download Code Coverage Report
        if: ${{ always() && (hashFiles('**/build/reports/jacoco/testCodeCoverageReport/**') != '') }}
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: code-coverage
          path: coverage-report

      - name: Download JUnit Test Results
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: junit-report
          path: junit-report

      - name: Download Checkstyle Report
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: checkstyle-report
          path: checkstyle-report

      - name: JUnit Summary
        id: summary
        uses: mikepenz/action-junit-report@v5
        with:
          report_paths: 'junit-report/**/*.xml'
          include_time_in_summary: true

      - name: Post PR Summary Comment
        if: github.actor != 'dependabot[bot]' && github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "test-and-coverage-summary"
          message: |
            üß™ **JUnit Test Summary**
            - Total Tests: `${{ steps.summary.outputs.total }}`
            - ‚ùå Failed: `${{ steps.summary.outputs.failed }}`
            - ‚ö†Ô∏è Skipped: `${{ steps.summary.outputs.skipped }}`
            - üìÑ [Download HTML Test Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            üìä **Code Coverage**
            - üìÑ [Download HTML Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            üßπ **Checkstyle**
            - üìÑ [Download Checkstyle Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
