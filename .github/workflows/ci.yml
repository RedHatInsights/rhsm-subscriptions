name: PR Validation ‚Äì Pre-Container

on:
  push:
    branches: [main, hotfix]
  pull_request:
    branches: [main, hotfix]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ACTIONS_STEP_DEBUG: true
  GITHUB_TOKEN: ${{ github.actor == 'dependabot[bot]' && secrets.DEPENDABOT_BOT_TOKEN || secrets.GITHUB_TOKEN }}

jobs:
  validate-format:
    name: Validate Format
    runs-on: ubuntu-latest
    outputs:
      checkstyle-report-url: ${{ steps.checkstyle-report-upload.outputs.artifact-url }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Run Spotless & Checkstyle
        id: run-lint
        run: |
          ./mvnw package validate checkstyle:checkstyle -DskipTests

      - name: Upload Checkstyle Report
        id: checkstyle-report-upload
        if: ${{ always() && (hashFiles('**/build/reports/checkstyle/**')) }}
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-report
          path: '${{ github.workspace }}/**/target/reports/checkstyle.html'

  validate-floorplan-queries:
    name: Validate FloorPlan Queries
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Git config
        run: |
          git config --global user.name "$(git log -1 --pretty=format:'%an')"
          git config --global user.email "$(git log -1 --pretty=format:'%ae')"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Setup JBang
        uses: jbangdev/setup-jbang@main

      - name: Setup yamlpath
        run: |
          jbang trust add https://github.com/yaml-path/jbang/
          curl -Ls https://sh.jbang.dev | bash -s - app install --fresh --force yamlpath@yaml-path/jbang

      - name: Setup PostgreSQL DB
        run: docker run -d -v ./init_dbs.sh:/usr/share/container-scripts/postgresql/start/set_passwords.sh:z -p 5432:5432 -e POSTGRESQL_ADMIN_PASSWORD=admin quay.io/sclorg/postgresql-13-c9s:c9s

      - name: Setup PostgreSQL client
        run: sudo apt-get install -y postgresql-client

      - name: Install Dependencies
        id: install-dependencies
        run: mvn install -DskipTests

      - name: Execute migrations
        id: run-migrations
        run: mvn -f swatch-database/pom.xml exec:java

      - name: Run FloorPlan Query Validation
        run: |
          QUERY_NAMES=$(yamlpath --format=PLAIN --single --expression="objects.(kind==FloorPlan).spec.queries.prefix" swatch-tally/deploy/clowdapp.yaml | tail -c +2 | head -c -2)
          for rawQueryName in ${QUERY_NAMES[*]}; do
            queryName=$(echo $rawQueryName | sed 's/,//g')
            query=$(yamlpath --format=PLAIN --single --expression="objects.(kind==FloorPlan).spec.queries.(prefix == $queryName).query" swatch-tally/deploy/clowdapp.yaml | sed 's/;//g')
            echo -e "Validating query: \n$query\n"
            output=$(PGPASSWORD=rhsm-subscriptions psql -h localhost -U rhsm-subscriptions -d rhsm-subscriptions -c "$query;")
            if [[ "$output" != *"(0 rows)"* ]]; then
              echo -e "Error in query. Check the output for more information: \n$output"
              exit 1
            fi
          done
          echo "Queries validation was successful"

  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Run Build
        id: run-build
        env:
          MAVEN_OPTS: "-Xmx2g -Xms512m"
        run: |
          ./mvnw clean package -DskipTests

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/target/*.jar

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    outputs:
      html-report-url: ${{ steps.html-report-upload.outputs.artifact-url }}
      coverage-report-url: ${{ steps.coverage-report-upload.outputs.artifact-url }}
      coverage-report-uploaded: ${{ steps.coverage-report-upload.outcome }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'maven'

      - name: Run Tests
        id: run-tests
        env:
          MAVEN_OPTS: "-Xmx4g -Xms512m"
        run: |
          ./mvnw verify -Dcoverage surefire-report:report

      - name: Upload JUnit Report
        if: always() && (hashFiles('**/target/surefire-reports/TEST-*.xml') != '')
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: '**/target/surefire-reports/TEST-*.xml'

      - name: Upload HTML Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-html-report
          path: '**/target/reports/*'

      - name: Upload Code Coverage
        if: ${{ always() && (hashFiles('coverage-report/target/site/jacoco-aggregate') != '') }}
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: 'coverage-report/target/site/jacoco-aggregate'

  summary:
    name: PR Summary
    permissions:
      pull-requests: write
    runs-on: ubuntu-latest
    needs: [validate-format, validate-floorplan-queries, build, test]
    if: always()

    steps:
      - name: Download Code Coverage Report
        id: download-coverage
        continue-on-error: true
        uses: actions/download-artifact@v4
        if: ${{ needs.test.outputs.coverage-report-uploaded == 'success' }}
        with:
          name: code-coverage
          path: coverage-report

      - name: Download JUnit Test Results
        id: download-junit
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: junit-report
          path: junit-report

      - name: Download Checkstyle Report
        id: download-checkstyle
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: checkstyle-report
          path: checkstyle-report

      - name: JUnit Test Report
        id: test-report
        uses: mikepenz/action-junit-report@v5
        # See https://stackoverflow.com/a/70549615/6124862
        if: ${{ steps.download-junit.outcome == 'success' }}
        with:
          report_paths: 'junit-report/**/TEST-*.xml'
          detailed_summary: true

      # With hearty thanks to https://stackoverflow.com/a/70816724/6124862
      - name: Fetch JUnit Test Report link
        id: junitAnnotations
        run: |
          URI="https://api.github.com"
          API_HEADER="Accept: application/vnd.github.v3+json"
          AUTH_HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"

          echo "::debug::Read job"
          job_body=$(curl -sSL -H "${AUTH_HEADER}" -H "$API_HEADER" "$URI/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/jobs")
          check_run_url=$(echo "$job_body" | jq -r '.jobs[] | select(.name == "Test & Coverage") | .check_run_url')

          echo "::debug::Fetching check run ${check_run_url}"
          check_suite_body=$(curl -sSL -H "${AUTH_HEADER}" -H "$API_HEADER" "${check_run_url}")
          check_suite_id=$(echo "$check_suite_body" | jq '.check_suite.id')

          echo "::debug::Fetching check suite ${check_suite_id}"
          check_runs_body=$(curl -sSL -H "${AUTH_HEADER}" -H "$API_HEADER" "$URI/repos/${GITHUB_REPOSITORY}/check-suites/${check_suite_id}/check-runs")
          details_url=$(echo "$check_runs_body" | jq -r '.check_runs[] | select (.name == "JUnit Test Report") | .details_url')

          echo "DETAILS_URL=$details_url" >> "$GITHUB_OUTPUT"

      - name: Post PR Summary Comment
        # We want to use .outcome because it is the success state of the task before continue-on-error
        # is applied.
        # See https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#steps-context
        if: ${{ github.event_name == 'pull_request' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ‚õèÔ∏è **[Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}?pr=${{ github.event.pull_request.number }})**

            üßπ **[Checkstyle](${{ needs.validate-format.outputs.checkstyle-report-url }})**

            üß™ **[JUnit](${{ needs.test.outputs.html-report-url }})**

              ${{ steps.test-report.outputs.summary }}

              <details>
                <summary>
                  <a href="${{ steps.junitAnnotations.outputs.DETAILS_URL }}">
                  Details
                  </a>
                </summary>
                ${{ steps.test-report.outputs.detailed_summary }}
              </details>

            ---


      # If the unit tests fail, we don't run coverage so post the coverage report separately
      - name: Post Coverage Summary Comment
        # We want to use .outcome because it is the success state of the task before continue-on-error
        # is applied.
        # See https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#steps-context
        if: ${{ github.event_name == 'pull_request' && steps.download-coverage.outcome == 'success' }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          append: true
          message: |

            üìä **[Code Coverage](${{ needs.test.outputs.coverage-report-url }})**
