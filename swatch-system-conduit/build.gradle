plugins {
    id "swatch.spring-boot-conventions"
    id "org.openapi.generator"
    id 'jsonschema2pojo'
    id "jacoco"
}

configurations {
    javaagent
}

ext {
    api_spec_path = "${projectDir}/src/main/spec/internal-organizations-sync-api-spec.yaml"
    config_file = "${projectDir}/src/main/spec/internal-organizations-sync-api-config.json"
}

openApiGenerate {
    generatorName = "jaxrs-spec"
    inputSpec = api_spec_path
    configFile = config_file
    outputDir = "$buildDir/generated"
    configOptions = [
        interfaceOnly: "true",
        generatePom: "false",
        dateLibrary: "java8",
        useTags: "true"
    ]
}

openApiValidate {
    inputSpec = api_spec_path
}

tasks.register("downloadJavaAgent", Copy) {
    into "$buildDir/javaagent"
    from {
        configurations.javaagent
    }
    rename { filename ->
        'splunk-otel-javaagent.jar'
    }
}

sourceSets.main.java.srcDirs += ["${buildDir}/generated/src/gen/java"]
compileJava.dependsOn tasks.openApiGenerate
assemble.dependsOn tasks.downloadJavaAgent

dependencies {
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    // For the LiveReload feature of spring boot as long as IntelliJ is set to build/make automatically on
    // code changes
    implementation 'org.springframework.boot:spring-boot-devtools'

    implementation project(":swatch-core")
    implementation project(":clients-core")

    implementation project(":clients:rhsm-client")

    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework:spring-context-support"
    implementation "org.springframework.kafka:spring-kafka"
    // the following dep is necessary to avoid jackson kotlin warnings
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "org.yaml:snakeyaml"
    implementation "org.postgresql:postgresql"
    implementation "io.hawt:hawtio-springboot"
    implementation "org.hibernate.validator:hibernate-validator"
    implementation libraries["resilience4j-spring-boot2"]

    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.kafka:spring-kafka-test"
    testImplementation project(':swatch-core-test')

    runtimeOnly "org.hsqldb:hsqldb"
    runtimeOnly "org.jolokia:jolokia-core"
    runtimeOnly "org.jboss.resteasy:resteasy-jackson2-provider"

    javaagent 'com.splunk:splunk-otel-javaagent:1.22.0'
}

jsonSchema2Pojo {
    source = files("${projectDir}/schemas")
    targetDirectory = file("${project.buildDir}/generated/src/gen/java")
    targetPackage = "org.candlepin.subscriptions.conduit.json"
    includeAdditionalProperties = false
    includeJsr303Annotations = true
    initializeCollections = false
    dateTimeType = 'java.time.OffsetDateTime'
    sourceType = 'yamlschema'
    generateBuilders = true
    includeGetters = true
    includeSetters = true
    inclusionLevel = 'USE_DEFAULTS'
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

springBoot {
    mainClass = "org.candlepin.subscriptions.SystemConduitApplication"
}
