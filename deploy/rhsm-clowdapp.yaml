---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: rhsm
parameters:
  - name: IMAGE_PULL_SECRET
    value: quay-cloudservices-pull
  - name: ENV_NAME
    value: env-rhsm
  - name: IMAGE
    value: quay.io/cloudservices/rhsm-subscriptions
  - name: IMAGE_TAG
    value: latest
  - name: SWATCH_UNLEASH_IMPORT_IMAGE
    value: quay.io/cloudservices/swatch-unleash-import
  - name: SWATCH_UNLEASH_IMPORT_IMAGE_TAG
    value: latest
  - name: SWATCH_UNLEASH_IMPORT_MEMORY_REQUEST
    value: 25Mi
  - name: SWATCH_UNLEASH_IMPORT_MEMORY_LIMIT
    value: 50Mi
  - name: SWATCH_UNLEASH_IMPORT_CPU_REQUEST
    value: 100m
  - name: SWATCH_UNLEASH_IMPORT_CPU_LIMIT
    value: 100m
  - name: SWATCH_UNLEASH_USER
    value: admin
  - name: SWATCH_UNLEASH_PASSWORD
    value: unleash4all
  # When needed bump SWATCH_UNLEASH_IMPORT_RUN_NUMBER
  - name: SWATCH_UNLEASH_IMPORT_RUN_NUMBER
    value: "1"

objects:
  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: rhsm
    spec:
      # The name of the ClowdEnvironment providing the services
      envName: ${ENV_NAME}
      # IQE plugin your ClowdApp is associated with
      testing:
        iqePlugin: rhsm-subscriptions

  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: swatch-unleash-import
    spec:
      envName: ${ENV_NAME}
      featureFlags: true
      pullSecrets:
        name: ${IMAGE_PULL_SECRET}

      jobs:
        - name: swatch-unleash-import-job-${SWATCH_UNLEASH_IMPORT_RUN_NUMBER}
          activeDeadlineSeconds: 1800
          successfulJobsHistoryLimit: 1
          podSpec:
            image: ${SWATCH_UNLEASH_IMPORT_IMAGE}:${SWATCH_UNLEASH_IMPORT_IMAGE_TAG}
            command: ["/bin/bash", "-x"]
            args:
              - /opt/unleash/import-features.sh
              - /unleash/flags.json
            env:
              - name: UNLEASH_USER
                value: ${SWATCH_UNLEASH_USER}
              - name: UNLEASH_PASSWORD
                value: ${SWATCH_UNLEASH_PASSWORD}
            resources:
              requests:
                cpu: ${SWATCH_UNLEASH_IMPORT_CPU_REQUEST}
                memory: ${SWATCH_UNLEASH_IMPORT_MEMORY_REQUEST}
              limits:
                cpu: ${SWATCH_UNLEASH_IMPORT_CPU_LIMIT}
                memory: ${SWATCH_UNLEASH_IMPORT_MEMORY_LIMIT}
            volumeMounts:
              - name: unleash-json
                mountPath: /unleash
            volumes:
              - name: unleash-json
                configMap:
                  name: unleash-json

  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdJobInvocation
    metadata:
      name: swatch-unleash-import-${SWATCH_UNLEASH_IMPORT_RUN_NUMBER}
    spec:
      appName: swatch-unleash-import
      jobs:
        - swatch-unleash-import-job-${SWATCH_UNLEASH_IMPORT_RUN_NUMBER}

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: unleash-json
    data:
      flags.json: |-
        {
            "version": 1,
            "features": [
                  {
                    "name": "swatch.swatch-metrics-hbi.emit-events",
                    "description": "Enable sending of HBI events to the Swatch events after conversion.",
                    "type": "operational",
                    "project": "default",
                    "stale": false,
                    "strategies": [
                        {
                            "name": "default",
                            "parameters": {}
                        }
                    ],
                    "variants": [],
                    "createdAt": "2024-01-10T20:20:42.531Z"
                }
            ]
        }

  # TODO populate access token into environment
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: splunk-otel-collector-config
      annotations:
        qontract.recycle: "true"
    data:
      config.yaml: |
        exporters:
          sapm:
            access_token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
            endpoint: https://ingest.us1.signalfx.com/v2/trace
            sending_queue:
              num_consumers: 32
          signalfx:
            access_token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
            api_url: https://api.us1.signalfx.com
            ingest_url: https://ingest.us1.signalfx.com
            sending_queue:
              num_consumers: 32
        extensions:
          health_check:
            endpoint: 0.0.0.0:13133
          http_forwarder:
            egress:
              endpoint: https://api.us1.signalfx.com
          zpages: null
        processors:
          batch: null
          filter/logs:
            logs:
              exclude:
                match_type: strict
                resource_attributes:
                - key: splunk.com/exclude
                  value: "true"
          k8sattributes:
            extract:
              annotations:
              - from: pod
                key: splunk.com/sourcetype
              - from: namespace
                key: splunk.com/exclude
                tag_name: splunk.com/exclude
              - from: pod
                key: splunk.com/exclude
                tag_name: splunk.com/exclude
              - from: namespace
                key: splunk.com/index
                tag_name: com.splunk.index
              - from: pod
                key: splunk.com/index
                tag_name: com.splunk.index
              labels:
              - key: app
              metadata:
              - k8s.namespace.name
              - k8s.node.name
              - k8s.pod.name
              - k8s.pod.uid
            pod_association:
            - sources:
              - from: resource_attribute
                name: k8s.pod.uid
            - sources:
              - from: resource_attribute
                name: k8s.pod.ip
            - sources:
              - from: resource_attribute
                name: ip
            - sources:
              - from: connection
            - sources:
              - from: resource_attribute
                name: host.name
          memory_limiter:
            check_interval: 2s
            limit_mib: ${SPLUNK_MEMORY_LIMIT_MIB}
          resource/add_cluster_name:
            attributes:
            - action: upsert
              key: k8s.cluster.name
              value: ${K8S_CLUSTER_NAME}
          resource/add_collector_k8s:
            attributes:
            - action: insert
              key: k8s.node.name
              value: ${K8S_NODE_NAME}
            - action: insert
              key: k8s.pod.name
              value: ${K8S_POD_NAME}
            - action: insert
              key: k8s.pod.uid
              value: ${K8S_POD_UID}
            - action: insert
              key: k8s.namespace.name
              value: ${K8S_NAMESPACE}
          resource/add_env_name:
            attributes:
            - action: insert
              key: deployment.environment
              value: ${ENV_NAME}
          resource/logs:
            attributes:
            - action: upsert
              from_attribute: k8s.pod.annotations.splunk.com/sourcetype
              key: com.splunk.sourcetype
            - action: delete
              key: k8s.pod.annotations.splunk.com/sourcetype
            - action: delete
              key: splunk.com/exclude
          resourcedetection:
            detectors:
            - env
            - system
            override: true
            timeout: 10s
        receivers:
          jaeger:
            protocols:
              grpc:
                endpoint: 0.0.0.0:14250
              thrift_http:
                endpoint: 0.0.0.0:14268
          otlp:
            protocols:
              grpc:
                endpoint: 0.0.0.0:4317
              http:
                endpoint: 0.0.0.0:4318
          prometheus/collector:
            config:
              scrape_configs:
              - job_name: otel-collector
                metric_relabel_configs:
                - action: drop
                  regex: otelcol_rpc_.*
                  source_labels:
                  - __name__
                - action: drop
                  regex: otelcol_http_.*
                  source_labels:
                  - __name__
                - action: drop
                  regex: otelcol_processor_batch_.*
                  source_labels:
                  - __name__
                scrape_interval: 10s
                static_configs:
                - targets:
                  - ${K8S_POD_IP}:8889
          signalfx:
            access_token_passthrough: true
            endpoint: 0.0.0.0:9943
          zipkin:
            endpoint: 0.0.0.0:9411
        service:
          extensions:
          - health_check
          - zpages
          - http_forwarder
          pipelines:
            logs/signalfx-events:
              exporters:
              - signalfx
              processors:
              - memory_limiter
              - batch
              receivers:
              - signalfx
            metrics:
              exporters:
              - signalfx
              processors:
              - memory_limiter
              - batch
              - resource/add_cluster_name
              - resource/add_env_name
              receivers:
              - otlp
              - signalfx
            metrics/collector:
              exporters:
              - signalfx
              processors:
              - memory_limiter
              - batch
              - resource/add_collector_k8s
              - resourcedetection
              - resource/add_cluster_name
              - resource/add_env_name
              receivers:
              - prometheus/collector
            traces:
              exporters:
              - sapm
              processors:
              - memory_limiter
              - k8sattributes
              - batch
              - resource/add_cluster_name
              - resource/add_env_name
              receivers:
              - otlp
              - jaeger
              - zipkin
          telemetry:
            logs:
              level: "debug"
            metrics:
              address: 0.0.0.0:8889
