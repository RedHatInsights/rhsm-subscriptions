---
apiVersion: v1
kind: Template
metadata:
  name: rhsm
parameters:
  - name: HAWTIO_BASE_PATH
    value: /app/rhsm-metrics/actuator/hawtio
  - name: SERVER_MAX_HTTP_HEADER_SIZE
    value: '48000'
  - name: LOGGING_LEVEL_ROOT
    value: WARN
  - name: LOGGING_LEVEL
    value: INFO
  - name: KAFKA_MESSAGE_THREADS
    value: '24'
  - name: KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS
    value: '3600000'
  - name: KAFKA_SEEK_OVERRIDE_END
    value: 'false'
  - name: KAFKA_SEEK_OVERRIDE_TIMESTAMP
    value: ''
  - name: REPLICAS
    value: '1'
  - name: IMAGE
    value: localhost/swatch
    # value: quay.io/cloudservices/rhsm-subscriptions
  - name: IMAGE_TAG
    # value: latest
    value: scratch
  - name: IMAGE_PULL_SECRET
    value: quay-cloudservices-pull
  - name: MEMORY_REQUEST
    value: 1000Mi
  - name: MEMORY_LIMIT
    value: 1700Mi
    # FIXME decreased for dev
  - name: CPU_REQUEST
    value: 250m
  - name: CPU_LIMIT
    value: 1800m
  - name: SPLUNK_FORWARDER_IMAGE
    value: quay.io/cloudservices/rhsm-splunk-forwarder:8f72cfb
  - name: SPLUNK_FORWARDER_MEMORY_REQUEST
    value: 128Mi
  - name: SPLUNK_FORWARDER_MEMORY_LIMIT
    value: 256Mi
  - name: SPLUNK_FORWARDER_CPU_REQUEST
    value: 50m
  - name: SPLUNK_FORWARDER_CPU_LIMIT
    value: 100m
  - name: CLOUDIGRADE_ENABLED
    value: 'false'
  - name: CLOUDIGRADE_HOST
    value: 'localhost'
  - name: CLOUDIGRADE_PORT
    value: '8080'
  - name: TOKEN_REFRESHER_IMAGE
    value: quay.io/observatorium/token-refresher:master-2021-02-05-5da9663
  - name: TOKEN_REFRESHER_CPU_REQUEST
    value: 50m
  - name: TOKEN_REFRESHER_CPU_LIMIT
    value: 100m
  - name: TOKEN_REFRESHER_MEMORY_REQUEST
    value: 128Mi
  - name: TOKEN_REFRESHER_MEMORY_LIMIT
    value: 150Mi
  - name: PROM_URL
    value: http://localhost:8082
  - name: DATABASE_CONNECTION_TIMEOUT_MS
    value: '30000'
  - name: DATABASE_MAX_POOL_SIZE
    value: '25'
  - name: INVENTORY_DATABASE_CONNECTION_TIMEOUT_MS
    value: '30000'
  - name: INVENTORY_DATABASE_MAX_POOL_SIZE
    value: '25'
  - name: OPENSHIFT_BILLING_MODEL_FILTER
    value: 'marketplace'
  - name: MARKETPLACE_TOKEN_REFRESH_PERIOD
    value: 1m
  - name: MARKETPLACE_MAX_ATTEMPTS
    value: '10'
  - name: MARKETPLACE_BACK_OFF_MAX_INTERVAL
    value: 64s
  - name: MARKETPLACE_BACK_OFF_INITIAL_INTERVAL
    value: 1s
  - name: MARKETPLACE_BACK_OFF_MULTIPLIER
    value: '2'
  - name: MARKETPLACE_VERIFY_BATCHES
    value: 'true'
  - name: MARKETPLACE_MANUAL_SUBMISSION_ENABLED
    value: 'false'
  - name: MARKETPLACE_AMENDMENT_NOT_SUPPORTED_MARKER
    value: '(amendments) is not available'
  - name: SUBSCRIPTION_URL
    value: https://subscription.qa.api.redhat.com/svcrest/subscription/v5
  - name: SUBSCRIPTION_MAX_CONNECTIONS
    value: '100'
  - name: SUBSCRIPTION_BACKOFF_INITIAL_INTERVAL
    value: 1s
  - name: SUBSCRIPTION_MAX_RETRY_ATTEMPTS
    value: '4'
  - name: SUBSCRIPTION_PAGE_SIZE
    value: '500'
  - name: USER_HOST
    # required: true # FIXME Not sure where this is provided
    value: 'user.qa.api.redhat.com'
  - name: USER_MAX_CONNECTIONS
    value: '100'
  - name: USER_MAX_ATTEMPTS
    value: '10'
  - name: USER_BACK_OFF_MAX_INTERVAL
    value: 64s
  - name: USER_BACK_OFF_INITIAL_INTERVAL
    value: 1s
  - name: USER_BACK_OFF_MULTIPLIER
    value: '2'
  - name: ENV_NAME
    value: env-rhsm
  - name: NAMESPACE
    value: rhsm

  - name: METERING_SCHEDULE
    value: 0 * * * *
  - name: CAPTURE_HOURLY_SNAPSHOT_SCHEDULE
    value: '@hourly'

objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdJobInvocation
  metadata:
    name: rhsm-jobs
  spec:
    appName: rhsm
    jobs:
      - metrics-cron
      - cron-tally
      - hourly-tally

- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: rhsm
    namespace: ${NAMESPACE}
  spec:
    # The name of the ClowdEnvironment providing the services
    envName: ${ENV_NAME}
    dependencies:
      - rbac
      - host-inventory

    kafkaTopics:
      - replicas: 3
        partitions: 3
        topicName: platform.rhsm-subscriptions.tally
      - replicas: 3
        partitions: 3
        topicName: platform.rhsm-subscriptions.tasks
      - replicas: 3
        partitions: 3
        topicName: platform.rhsm-subscriptions.openshift-metering-tasks

    # Creates a database if local mode, or uses RDS in production
    database:
      # Must specify both a name and a major postgres version
      name: rhsm-db
      version: 12

    pullSecrets:
      name: ${IMAGE_PULL_SECRET}
    deployments:
    - name: api
      minReplicas: 1
      webServices:
        public:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/bash
          - /usr/local/s2i/run
        initContainers:
          - env:
              - name: SPRING_PROFILES_ACTIVE
                value: liquibase-only
            inheritEnv: true
            command:
              - /bin/bash
              - /usr/local/s2i/run
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: api
          # turn off built-in jolokia, so that the spring boot jolokia actuator will work
          - name: AB_JOLOKIA_OFF
            value: 'true'
          - name: SERVER_MAX_HTTP_HEADER_SIZE
            value: ${SERVER_MAX_HTTP_HEADER_SIZE}
          - name: HAWTIO_BASE_PATH
            value: ${HAWTIO_BASE_PATH}
          - name: LOG_FILE
            value: /logs/server.log
          - name: JAVA_MAX_MEM_RATIO
            value: '85'
          - name: GC_MAX_METASPACE_SIZE
            value: '256'
          - name: LOGGING_LEVEL_ROOT
            value: ${LOGGING_LEVEL_ROOT}
          - name: LOGGING_LEVEL_ORG_CANDLEPIN
            value: ${LOGGING_LEVEL}
          - name: KAFKA_MESSAGE_THREADS
            value: ${KAFKA_MESSAGE_THREADS}
          - name: KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS
            value: ${KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS}
          - name: KAFKA_SEEK_OVERRIDE_END
            value: ${KAFKA_SEEK_OVERRIDE_END}
          - name: KAFKA_SEEK_OVERRIDE_TIMESTAMP
            value: ${KAFKA_SEEK_OVERRIDE_TIMESTAMP}
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: hostname
          - name: DATABASE_PORT
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: port
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: username
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: password
          - name: DATABASE_DATABASE
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: name
          - name: DATABASE_CONNECTION_TIMEOUT_MS
            value: ${DATABASE_CONNECTION_TIMEOUT_MS}
          - name: DATABASE_MAX_POOL_SIZE
            value: ${DATABASE_MAX_POOL_SIZE}
          - name: INVENTORY_DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: host-inventory-db
                key: host
          - name: INVENTORY_DATABASE_DATABASE
            valueFrom:
              secretKeyRef:
                name: host-inventory-db
                key: name
          - name: INVENTORY_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: host-inventory-db
                key: username
          - name: INVENTORY_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: host-inventory-db
                key: password
          - name: CLOUDIGRADE_ENABLED
            value: ${CLOUDIGRADE_ENABLED}
          - name: CLOUDIGRADE_HOST
            value: ${CLOUDIGRADE_HOST}
          - name: CLOUDIGRADE_PORT
            value: ${CLOUDIGRADE_PORT}
          - name: PROM_URL
            value: ${PROM_URL}
          - name: OPENSHIFT_BILLING_MODEL_FILTER
            value: ${OPENSHIFT_BILLING_MODEL_FILTER}
          - name: USER_HOST
            value: ${USER_HOST}
          - name: USER_MAX_CONNECTIONS
            value: ${USER_MAX_CONNECTIONS}
          - name: USER_MAX_ATTEMPTS
            value: ${USER_MAX_ATTEMPTS}
          - name: USER_BACK_OFF_MAX_INTERVAL
            value: ${USER_BACK_OFF_MAX_INTERVAL}
          - name: USER_BACK_OFF_INITIAL_INTERVAL
            value: ${USER_BACK_OFF_INITIAL_INTERVAL}
          - name: USER_BACK_OFF_MULTIPLIER
            value: ${USER_BACK_OFF_MULTIPLIER}
          - name: RHSM_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: tls
                key: keystore_password
          - name: RHSM_KEYSTORE
            value: /pinhead/keystore.jks
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
        volumeMounts:
          - name: config
            mountPath: /config
          - name: logs
            mountPath: /logs
          - name: pinhead
            mountPath: /pinhead
        volumes:
          - name: config
            configMap:
              name: rhsm-subscriptions-config
          - name: splunk
            secret:
              secretName: splunk
          - name: logs
            emptyDir:
          - name: pinhead
            secret:
              secretName: pinhead

    - name: subscriptions-worker
      minReplicas: 1
      webServices:
        public:
          enabled: true
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/bash
          - /usr/local/s2i/run
        initContainers:
          - env:
              - name: SPRING_PROFILES_ACTIVE
                value: liquibase-only
            inheritEnv: true
            command:
              - /bin/bash
              - /usr/local/s2i/run
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: worker,kafka-queue
          - name: AB_JOLOKIA_OFF
            value: 'true'
          - name: SERVER_MAX_HTTP_HEADER_SIZE
            value: ${SERVER_MAX_HTTP_HEADER_SIZE}
          - name: HAWTIO_BASE_PATH
            value: ${HAWTIO_BASE_PATH}
          - name: LOG_FILE
            value: /logs/server.log
          - name: JAVA_MAX_MEM_RATIO
            value: '85'
          - name: GC_MAX_METASPACE_SIZE
            value: '256'
          - name: LOGGING_LEVEL_ROOT
            value: ${LOGGING_LEVEL_ROOT}
          - name: LOGGING_LEVEL_ORG_CANDLEPIN
            value: ${LOGGING_LEVEL}
          - name: KAFKA_MESSAGE_THREADS
            value: ${KAFKA_MESSAGE_THREADS}
          - name: KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS
            value: ${KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS}
          - name: KAFKA_SEEK_OVERRIDE_END
            value: ${KAFKA_SEEK_OVERRIDE_END}
          - name: KAFKA_SEEK_OVERRIDE_TIMESTAMP
            value: ${KAFKA_SEEK_OVERRIDE_TIMESTAMP}
          - name: DATABASE_CONNECTION_TIMEOUT_MS
            value: ${DATABASE_CONNECTION_TIMEOUT_MS}
          - name: DATABASE_MAX_POOL_SIZE
            value: ${DATABASE_MAX_POOL_SIZE}
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: hostname
          - name: DATABASE_PORT
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: port
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: username
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: password
          - name: DATABASE_DATABASE
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: name
          - name: INVENTORY_DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: host-inventory-db-readonly
                key: db.host
          - name: INVENTORY_DATABASE_DATABASE
            valueFrom:
              secretKeyRef:
                name: host-inventory-db-readonly
                key: db.name
          - name: INVENTORY_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: host-inventory-db-readonly
                key: db.user
          - name: INVENTORY_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: host-inventory-db-readonly
                key: db.password
          - name: INVENTORY_DATABASE_CONNECTION_TIMEOUT_MS
            value: ${INVENTORY_DATABASE_CONNECTION_TIMEOUT_MS}
          - name: INVENTORY_DATABASE_MAX_POOL_SIZE
            value: ${INVENTORY_DATABASE_MAX_POOL_SIZE}
          - name: CLOUDIGRADE_ENABLED
            value: ${CLOUDIGRADE_ENABLED}
          - name: CLOUDIGRADE_HOST
            value: ${CLOUDIGRADE_HOST}
          - name: CLOUDIGRADE_PORT
            value: ${CLOUDIGRADE_PORT}
          - name: PROM_URL
            value: ${PROM_URL}
          - name: OPENSHIFT_BILLING_MODEL_FILTER
            value: ${OPENSHIFT_BILLING_MODEL_FILTER}
          - name: USER_HOST
            value: ${USER_HOST}
          - name: USER_MAX_CONNECTIONS
            value: ${USER_MAX_CONNECTIONS}
          - name: USER_MAX_ATTEMPTS
            value: ${USER_MAX_ATTEMPTS}
          - name: USER_BACK_OFF_MAX_INTERVAL
            value: ${USER_BACK_OFF_MAX_INTERVAL}
          - name: USER_BACK_OFF_INITIAL_INTERVAL
            value: ${USER_BACK_OFF_INITIAL_INTERVAL}
          - name: USER_BACK_OFF_MULTIPLIER
            value: ${USER_BACK_OFF_MULTIPLIER}
          - name: RHSM_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: tls
                key: keystore_password
          - name: RHSM_KEYSTORE
            value: /pinhead/keystore.jks
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
        volumeMounts:
          - name: config
            mountPath: /config
          - name: logs
            mountPath: /logs
          - name: pinhead
            mountPath: /pinhead
        volumes:
          - name: config
            configMap:
              name: rhsm-subscriptions-config
          - name: splunk
            secret:
              secretName: splunk
          - name: logs
            emptyDir:
          - name: pinhead
            secret:
              secretName: pinhead

    - name: marketplace-worker
      webServices:
        public:
          enabled: true
      minReplicas: 1
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/bash
          - /usr/local/s2i/run
        initContainers:
          - env:
              - name: SPRING_PROFILES_ACTIVE
                value: liquibase-only
            inheritEnv: true
            command:
              - /bin/bash
              - /usr/local/s2i/run
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: marketplace,kafka-queue
          - name: AB_JOLOKIA_OFF
            value: 'true'
          - name: SERVER_MAX_HTTP_HEADER_SIZE
            value: ${SERVER_MAX_HTTP_HEADER_SIZE}
          - name: HAWTIO_BASE_PATH
            value: ${HAWTIO_BASE_PATH}
          - name: LOG_FILE
            value: /logs/server.log
          - name: JAVA_MAX_MEM_RATIO
            value: '85'
          - name: GC_MAX_METASPACE_SIZE
            value: '256'
          - name: LOGGING_LEVEL_ROOT
            value: ${LOGGING_LEVEL_ROOT}
          - name: LOGGING_LEVEL_ORG_CANDLEPIN
            value: ${LOGGING_LEVEL}
          - name: KAFKA_MESSAGE_THREADS
            value: ${KAFKA_MESSAGE_THREADS}
          - name: KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS
            value: ${KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS}
          - name: KAFKA_SEEK_OVERRIDE_END
            value: ${KAFKA_SEEK_OVERRIDE_END}
          - name: KAFKA_SEEK_OVERRIDE_TIMESTAMP
            value: ${KAFKA_SEEK_OVERRIDE_TIMESTAMP}
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: hostname
          - name: DATABASE_PORT
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: port
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: username
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: password
          - name: DATABASE_DATABASE
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: name
          - name: DATABASE_CONNECTION_TIMEOUT_MS
            value: ${DATABASE_CONNECTION_TIMEOUT_MS}
          - name: DATABASE_MAX_POOL_SIZE
            value: ${DATABASE_MAX_POOL_SIZE}
          - name: MARKETPLACE_API_KEY
            valueFrom:
              secretKeyRef:
                name: marketplace
                key: key
          - name: MARKETPLACE_URL
            valueFrom:
              secretKeyRef:
                name: marketplace
                key: url
          - name: MARKETPLACE_TOKEN_REFRESH_PERIOD
            value: ${MARKETPLACE_TOKEN_REFRESH_PERIOD}
          - name: MARKETPLACE_MAX_ATTEMPTS
            value: ${MARKETPLACE_MAX_ATTEMPTS}
          - name: MARKETPLACE_BACK_OFF_MAX_INTERVAL
            value: ${MARKETPLACE_BACK_OFF_MAX_INTERVAL}
          - name: MARKETPLACE_BACK_OFF_INITIAL_INTERVAL
            value: ${MARKETPLACE_BACK_OFF_INITIAL_INTERVAL}
          - name: MARKETPLACE_BACK_OFF_MULTIPLIER
            value: ${MARKETPLACE_BACK_OFF_MULTIPLIER}
          - name: MARKETPLACE_VERIFY_BATCHES
            value: ${MARKETPLACE_VERIFY_BATCHES}
          - name: MARKETPLACE_MANUAL_SUBMISSION_ENABLED
            value: ${MARKETPLACE_MANUAL_SUBMISSION_ENABLED}
          - name: MARKETPLACE_AMENDMENT_NOT_SUPPORTED_MARKER
            value: ${MARKETPLACE_AMENDMENT_NOT_SUPPORTED_MARKER}
          - name: SUBSCRIPTION_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: tls
                key: keystore_password
          - name: SUBSCRIPTION_KEYSTORE
            value: /pinhead/keystore.jks
          - name: SUBSCRIPTION_URL
            value: ${SUBSCRIPTION_URL}
          - name: SUBSCRIPTION_MAX_CONNECTIONS
            value: ${SUBSCRIPTION_MAX_CONNECTIONS}
          - name: SUBSCRIPTION_BACKOFF_INITIAL_INTERVAL
            value: ${SUBSCRIPTION_BACKOFF_INITIAL_INTERVAL}
          - name: SUBSCRIPTION_MAX_RETRY_ATTEMPTS
            value: ${SUBSCRIPTION_MAX_RETRY_ATTEMPTS}
          - name: SUBSCRIPTION_PAGE_SIZE
            value: ${SUBSCRIPTION_PAGE_SIZE}
          - name: USER_HOST
            value: ${USER_HOST}
          - name: USER_MAX_CONNECTIONS
            value: ${USER_MAX_CONNECTIONS}
          - name: USER_MAX_ATTEMPTS
            value: ${USER_MAX_ATTEMPTS}
          - name: USER_BACK_OFF_MAX_INTERVAL
            value: ${USER_BACK_OFF_MAX_INTERVAL}
          - name: USER_BACK_OFF_INITIAL_INTERVAL
            value: ${USER_BACK_OFF_INITIAL_INTERVAL}
          - name: USER_BACK_OFF_MULTIPLIER
            value: ${USER_BACK_OFF_MULTIPLIER}
          - name: RHSM_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: tls
                key: keystore_password
          - name: RHSM_KEYSTORE
            value: /pinhead/keystore.jks
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
        volumeMounts:
          - name: logs
            mountPath: /logs
          - name: pinhead
            mountPath: /pinhead
        volumes:
          - name: splunk
            secret:
              secretName: splunk
          - name: logs
            emptyDir:
          - name: pinhead
            secret:
              secretName: pinhead

    - name: metrics-worker
      webServices:
        public:
          enabled: true
      minReplicas: 1
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/bash
          - /usr/local/s2i/run
        initContainers:
          - env:
              - name: SPRING_PROFILES_ACTIVE
                value: liquibase-only
            inheritEnv: true
            command:
              - /bin/bash
              - /usr/local/s2i/run
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: openshift-metering-worker,kafka-queue
           # turn off built-in jolokia, so that the spring boot jolokia actuator will work
          - name: AB_JOLOKIA_OFF
            value: 'true'
          - name: SERVER_MAX_HTTP_HEADER_SIZE
            value: ${SERVER_MAX_HTTP_HEADER_SIZE}
          - name: HAWTIO_BASE_PATH
            value: ${HAWTIO_BASE_PATH}
          - name: LOG_FILE
            value: /logs/server.log
          - name: JAVA_MAX_MEM_RATIO
            value: '85'
          - name: GC_MAX_METASPACE_SIZE
            value: '256'
          - name: LOGGING_LEVEL_ROOT
            value: ${LOGGING_LEVEL_ROOT}
          - name: LOGGING_LEVEL_ORG_CANDLEPIN
            value: ${LOGGING_LEVEL}
          - name: KAFKA_MESSAGE_THREADS
            value: ${KAFKA_MESSAGE_THREADS}
          - name: KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS
            value: ${KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS}
          - name: KAFKA_SEEK_OVERRIDE_END
            value: ${KAFKA_SEEK_OVERRIDE_END}
          - name: KAFKA_SEEK_OVERRIDE_TIMESTAMP
            value: ${KAFKA_SEEK_OVERRIDE_TIMESTAMP}
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: hostname
          - name: DATABASE_PORT
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: port
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: username
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: password
          - name: DATABASE_DATABASE
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: name
          - name: DATABASE_CONNECTION_TIMEOUT_MS
            value: ${DATABASE_CONNECTION_TIMEOUT_MS}
          - name: DATABASE_MAX_POOL_SIZE
            value: ${DATABASE_MAX_POOL_SIZE}
          - name: INVENTORY_DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: host-inventory-db
                key: host
          - name: INVENTORY_DATABASE_DATABASE
            valueFrom:
              secretKeyRef:
                name: host-inventory-db
                key: name
          - name: INVENTORY_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: host-inventory-db
                key: username
          - name: INVENTORY_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: host-inventory-db
                key: password
          - name: CLOUDIGRADE_ENABLED
            value: ${CLOUDIGRADE_ENABLED}
          - name: CLOUDIGRADE_HOST
            value: ${CLOUDIGRADE_HOST}
          - name: CLOUDIGRADE_PORT
            value: ${CLOUDIGRADE_PORT}
          - name: PROM_URL
            value: ${PROM_URL}
          - name: OPENSHIFT_BILLING_MODEL_FILTER
            value: ${OPENSHIFT_BILLING_MODEL_FILTER}
          - name: USER_HOST
            value: ${USER_HOST}
          - name: USER_MAX_CONNECTIONS
            value: ${USER_MAX_CONNECTIONS}
          - name: USER_MAX_ATTEMPTS
            value: ${USER_MAX_ATTEMPTS}
          - name: USER_BACK_OFF_MAX_INTERVAL
            value: ${USER_BACK_OFF_MAX_INTERVAL}
          - name: USER_BACK_OFF_INITIAL_INTERVAL
            value: ${USER_BACK_OFF_INITIAL_INTERVAL}
          - name: USER_BACK_OFF_MULTIPLIER
            value: ${USER_BACK_OFF_MULTIPLIER}
          - name: RHSM_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: tls
                key: keystore_password
          - name: RHSM_KEYSTORE
            value: /pinhead/keystore.jks
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
        volumeMounts:
          - name: config
            mountPath: /config
          - name: logs
            mountPath: /logs
          - name: pinhead
            mountPath: /pinhead
        volumes:
          - name: config
            configMap:
              name: rhsm-subscriptions-config
          - name: splunk
            secret:
              secretName: splunk
          - name: logs
            emptyDir:
          - name: pinhead
            secret:
              secretName: pinhead

    jobs:
    - name: hourly-tally
      schedule: ${CAPTURE_HOURLY_SNAPSHOT_SCHEDULE}
      restartPolicy: Never
      podSpec:
        image: ${IMAGE}:${IMAGE_TAG}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/bash
          - /usr/local/s2i/run
        initContainers:
          - env:
              - name: SPRING_PROFILES_ACTIVE
                value: liquibase-only
            inheritEnv: true
            command:
              - /bin/bash
              - /usr/local/s2i/run
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: capture-snapshots,kafka-queue
          - name: JAVA_MAX_MEM_RATIO
            value: '85'
          - name: GC_MAX_METASPACE_SIZE
            value: '256'
          - name: LOG_FILE
            value: /logs/server.log
          - name: LOGGING_LEVEL_ROOT
            value: ${LOGGING_LEVEL_ROOT}
          - name: LOGGING_LEVEL_ORG_CANDLEPIN
            value: ${LOGGING_LEVEL}
          - name: DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: hostname
          - name: DATABASE_PORT
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: port
          - name: DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: username
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: password
          - name: DATABASE_DATABASE
            valueFrom:
              secretKeyRef:
                name: rhsm-db
                key: name
          - name: INVENTORY_DATABASE_HOST
            valueFrom:
              secretKeyRef:
                name: host-inventory-db-readonly
                key: db.host
          - name: INVENTORY_DATABASE_DATABASE
            valueFrom:
              secretKeyRef:
                name: host-inventory-db-readonly
                key: db.name
          - name: INVENTORY_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                name: host-inventory-db-readonly
                key: db.user
          - name: INVENTORY_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: host-inventory-db-readonly
                key: db.password
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /actuator/health
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 300
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: ${CPU_REQUEST}
            memory: ${MEMORY_REQUEST}
          limits:
            cpu: ${CPU_LIMIT}
            memory: ${MEMORY_LIMIT}
        volumeMounts:
          - name: logs
            mountPath: /logs
        volumes:
          - name: logs
            emptyDir:

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: rhsm-subscriptions-config
  data:
    ssl.properties: |-
      # force client cert auth for ingress endpoints
      server.port=8443
      server.ssl.client-auth=NEED
      server.ssl.enabled=true

      server.ssl.key-store=${KEYSTORE}
      server.ssl.key-store-password=${KEYSTORE_PASSWORD}

      server.ssl.trust-store=${TRUSTSTORE}
      server.ssl.trust-store-password=${TRUSTSTORE_PASSWORD}

      # put /actuator calls on 8080
      management.server.port=8080
      management.server.ssl.enabled=false

