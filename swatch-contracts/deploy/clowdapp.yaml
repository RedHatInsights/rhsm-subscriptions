---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: swatch-contracts
parameters:
  - name: JAVA_DEBUG
    # Set to "true" to enable remote debugging
    value: ''
  - name: QUARKUS_LAUNCH_DEVMODE
    value: ''
  - name: IMAGE_PULL_SECRET
    value: quay-cloudservices-pull
  - name: MEMORY_REQUEST
    value: 1000Mi
  - name: MEMORY_LIMIT
    value: 1400Mi
  - name: CPU_REQUEST
    value: 350m
  - name: CPU_LIMIT
    value: 1500m
  - name: ENV_NAME
    value: env-swatch-contracts
  - name: REPLICAS
    value: '1'
  - name: IMAGE
    value: quay.io/cloudservices/swatch-contracts
  - name: IMAGE_TAG
    value: latest
  - name: ENABLE_SPLUNK_HEC
    value: 'true'
  - name: SPLUNK_HEC_URL
    value: https://splunk-hec.redhat.com:8088
  - name: SPLUNK_SOURCE
    value: 'swatch-contracts'
  - name: SPLUNK_SOURCE_TYPE
    value: 'quarkus_service'
  - name: SPLUNK_HEC_BATCH_SIZE
    value: '1000'
  - name: SPLUNK_HEC_BATCH_INTERVAL
    value: '10S'
  - name: SPLUNK_HEC_RETRY_COUNT
    value: '3'
  - name: SPLUNK_HEC_INCLUDE_EX
    value: 'true'
  - name: LOGGING_LEVEL_ROOT
    value: 'INFO'
  - name: LOGGING_LEVEL_COM_REDHAT_SWATCH
    value: 'INFO'
  # allow overriding to support independent deploy with bonfire
  - name: DB_POD
    value: swatch-tally
  - name: QUARKUS_PROFILE
    value: prod
  - name: UMB_KEYSTORE_PATH
    value: /pinhead/keystore.jks

objects:
  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: swatch-contracts
      labels:
        prometheus: quarkus
    spec:
      envName: ${ENV_NAME}

      pullSecrets:
        name: ${IMAGE_PULL_SECRET}

      database:
        sharedDbAppName: swatch-tally
      dependencies:
        - swatch-tally
        - swatch-subscription-sync
        - rbac

      # Creates a database if local mode, or uses RDS in production
      # database:
      #   name: ${DB_POD}
      #   version: 12

      deployments:
        - name: service
          replicas: ${{REPLICAS}}
          webServices:
            public:
              enabled: true
          podSpec:
            image: ${IMAGE}:${IMAGE_TAG}
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /health/live
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 5
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /health/ready
                port: 9000
                scheme: HTTP
              initialDelaySeconds: 20
              periodSeconds: 20
              successThreshold: 1
              timeoutSeconds: 5
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
            env:
              - name: JAVA_DEBUG
                value: ${JAVA_DEBUG}
              - name: QUARKUS_LAUNCH_DEVMODE
                value: ${QUARKUS_LAUNCH_DEVMODE}
              - name: LOGGING_LEVEL_ROOT
                value: ${LOGGING_LEVEL_ROOT}
              - name: LOGGING_LEVEL_COM_REDHAT_SWATCH
                value: ${LOGGING_LEVEL_COM_REDHAT_SWATCH}
              - name: DATABASE_HOST
                valueFrom:
                  secretKeyRef:
                    name: ${DB_POD}-db
                    key: db.host
              - name: DATABASE_PORT
                valueFrom:
                  secretKeyRef:
                    name: ${DB_POD}-db
                    key: db.port
              - name: DATABASE_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: ${DB_POD}-db
                    key: db.user
              - name: DATABASE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: ${DB_POD}-db
                    key: db.password
              - name: DATABASE_DATABASE
                valueFrom:
                  secretKeyRef:
                    name: ${DB_POD}-db
                    key: db.name
              - name: ENABLE_SPLUNK_HEC
                value: ${ENABLE_SPLUNK_HEC}
              - name: SPLUNKMETA_namespace
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
              - name: HOST_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.name
              - name: SPLUNK_HEC_URL
                value: ${SPLUNK_HEC_URL}
              - name: SPLUNK_HEC_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: splunk-hec-external
                    key: token
              - name: SPLUNK_SOURCE
                value: ${SPLUNK_SOURCE}
              - name: SPLUNK_SOURCE_TYPE
                value: ${SPLUNK_SOURCE_TYPE}
              - name: SPLUNK_HEC_BATCH_SIZE
                value: ${SPLUNK_HEC_BATCH_SIZE}
              - name: SPLUNK_HEC_BATCH_INTERVAL
                value: ${SPLUNK_HEC_BATCH_INTERVAL}
              - name: SPLUNK_HEC_RETRY_COUNT
                value: ${SPLUNK_HEC_RETRY_COUNT}
              - name: SPLUNK_HEC_INCLUDE_EX
                value: ${SPLUNK_HEC_INCLUDE_EX}
              - name: SWATCH_SELF_PSK
                valueFrom:
                  secretKeyRef:
                    name: swatch-psks
                    key: self
              - name: QUARKUS_PROFILE
                value: ${QUARKUS_PROFILE}
              - name: KEYSTORE_RESOURCE
                value: file:/pinhead/keystore.jks
              - name: KEYSTORE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: tls
                    key: keystore_password
              - name: KEYSTORE_PATH
                value: /pinhead/keystore.jks
              - name: UMB_KEYSTORE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: tls
                    key: keystore_password
              - name: UMB_KEYSTORE_PATH
                value: ${UMB_KEYSTORE_PATH}
              - name: TRUSTSTORE_PATH
                value: /pinhead/truststore.jks
              - name: TRUSTSTORE_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: tls
                    key: keystore_password
              - name: UMB_NAMESPACE
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
            volumeMounts:
              - name: logs
                mountPath: /logs
              - name: pinhead
                mountPath: /pinhead
            volumes:
              - name: logs
                emptyDir:
              - name: pinhead
                secret:
                  secretName: pinhead

  - apiVersion: v1
    kind: Secret
    metadata:
      name: swatch-psks
    data:
      self: cGxhY2Vob2xkZXI=
