SERVER_PORT=${clowder.endpoints.swatch-contracts.port:8000}
SWATCH_INTERNAL_SUBSCRIPTION_ENDPOINT=${clowder.endpoints.swatch-subscription-sync-service.url}
WIREMOCK_ENDPOINT=http://wiremock-service:8000
LOGGING_LEVEL_COM_REDHAT_SWATCH=INFO
LOGGING_LEVEL_ROOT=INFO
DATABASE_HOST=${clowder.database.hostname:localhost}
DATABASE_PORT=${clowder.database.port:5432}
DATABASE_DATABASE=${clowder.database.name:rhsm-subscriptions}
DATABASE_USERNAME=${clowder.database.username:rhsm-subscriptions}
DATABASE_PASSWORD=${clowder.database.password:rhsm-subscriptions}

SWATCH_TEST_APIS_ENABLED=true
%ephemeral.SWATCH_TEST_APIS_ENABLED=true
%wiremock.SWATCH_TEST_APIS_ENABLED=true
%stage.SWATCH_TEST_APIS_ENABLED=true
%prod.SWATCH_TEST_APIS_ENABLED=false

ENABLE_SPLUNK_HEC=true
SPLUNK_HEC_URL=https://splunk-hec.redhat.com:8088/
SPLUNK_SOURCE=swatch-contracts
SPLUNK_SOURCE_TYPE=quarkus_service
SPLUNK_HEC_BATCH_SIZE=1000
SPLUNK_HEC_BATCH_INTERVAL=10S
SPLUNK_HEC_RETRY_COUNT=3
SPLUNK_HEC_INCLUDE_EX=false

# dev-specific defaults; these can still be overridden by env var
%dev.LOGGING_LEVEL_COM_REDHAT_SWATCH=DEBUG
%dev.SWATCH_SELF_PSK=placeholder
%dev.ENABLE_SPLUNK_HEC=false
%dev.SPLUNK_HEC_URL=https://splunk-hec.prod.utility-us-east-2.redhat.com:8088/
%dev.HOST_NAME=${USER}@${HOSTNAME}
%dev.SPLUNKMETA_namespace=local
%dev.SPLUNK_HEC_INCLUDE_EX=true
%dev.SPLUNK_DISABLE_CERTIFICATE_VALIDATION=true

%dev.SWATCH_INTERNAL_SUBSCRIPTION_ENDPOINT=http://localhost:8101

# set the test profile properties to the same values as dev; these get activated for @QuarkusTest
%test.SWATCH_SELF_PSK=${%dev.SWATCH_SELF_PSK}
%test.ENABLE_SPLUNK_HEC=${%dev.ENABLE_SPLUNK_HEC}
%test.HOST_NAME=unit_tests

# per-environment Red Hat Partner Gateway Endpoints
%dev.ENTITLEMENT_GATEWAY_URL=https://ibm-entitlement-gateway.dev.api.redhat.com
%qa.ENTITLEMENT_GATEWAY_URL=https://ibm-entitlement-gateway.qa.api.redhat.com
%stage.ENTITLEMENT_GATEWAY_URL=https://ibm-entitlement-gateway.stage.api.redhat.com
%prod.ENTITLEMENT_GATEWAY_URL=https://ibm-entitlement-gateway.api.redhat.com
%ephemeral.ENTITLEMENT_GATEWAY_URL=${WIREMOCK_ENDPOINT}/mock/partnerApi
%wiremock.ENTITLEMENT_GATEWAY_URL=http://wiremock:8101/mock/partnerApi

# per-environment Red Hat IT Subscription Service Endpoints
SUBSCRIPTION_MAX_CONNECTIONS=100
SUBSCRIPTION_MAX_RETRY_ATTEMPTS=4
SUBSCRIPTION_BACK_OFF_MAX_INTERVAL=64s
SUBSCRIPTION_BACK_OFF_INITIAL_INTERVAL=1s
SUBSCRIPTION_BACK_OFF_MULTIPLIER=2
SUBSCRIPTION_IGNORE_EXPIRED_OLDER_THAN=60d
SUBSCRIPTION_IGNORE_STARTING_LATER_THAN=60d
%dev.ENABLE_PAYG_SUBSCRIPTION_FORCE_SYNC=true
%test.ENABLE_PAYG_SUBSCRIPTION_FORCE_SYNC=true
%prod.DEVTEST_SUBSCRIPTION_EDITING_ENABLED=false
%dev.SUBSCRIPTION_URL=https://subscription.dev.api.redhat.com/svcrest/subscription/v5
%qa.SUBSCRIPTION_URL=https://subscription.qa.api.redhat.com/svcrest/subscription/v5
%stage.SUBSCRIPTION_URL=https://subscription.stage.api.redhat.com/svcrest/subscription/v5
%prod.SUBSCRIPTION_URL=https://subscription.api.redhat.com/svcrest/subscription/v5
%ephemeral.SUBSCRIPTION_URL=${%stage.SUBSCRIPTION_URL}
%wiremock.SUBSCRIPTION_URL=http://wiremock:8101/mock/subs
%wiremock.SWATCH_INTERNAL_SUBSCRIPTION_ENDPOINT=http://wiremock:8101/mock/internalSubs

# dev-specific config items that don't need to be overridden via env var
# do not use JSON logs in dev mode
%dev.quarkus.log.console.json=false
%dev.quarkus.live-reload.password=${QUARKUS_RELOAD_PASSWOPRD:changeit}
quarkus.log.level=${LOGGING_LEVEL_ROOT}
# customized w/ %X which shows MDC values
quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) %X %s%e%n
quarkus.log.category."com.redhat.swatch".level=${LOGGING_LEVEL_COM_REDHAT_SWATCH}
# NOTE: because we extend spec interfaces, quarkus.security.jaxrs.deny-unannotated-endpoints=true does
# *NOT* deny by default, but the following does work
quarkus.security.deny-unannotated-members=true
# Disable role checking in dev mode. Use QUARKUS_SECURITY_AUTH_ENABLED_IN_DEV_MODE=true to override.
quarkus.security.auth.enabled-in-dev-mode=false
# Set retry delay to 0 to keep tests fast
%test.Retry/delay=0
quarkus.transaction-manager.default-transaction-timeout=PT5M

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DATABASE_USERNAME}
quarkus.datasource.password=${DATABASE_PASSWORD}
quarkus.datasource.jdbc.url=jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}?ApplicationName=${quarkus.application.name:swatch-contracts}

%test.quarkus.datasource.db-kind=h2
# NOTE: because some of the entities use columns named "value", it is necessary to configure h2 to *not* treat it as a keyword.
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:db;NON_KEYWORDS=VALUE
%test.quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
quarkus.hibernate-orm.log.sql=${LOGGING_SHOW_SQL_QUERIES:false}

quarkus.liquibase.database-change-log-lock-table-name=DATABASECHANGELOGLOCK_SWATCH_CONTRACTS
quarkus.liquibase.database-change-log-table-name=DATABASECHANGELOG_SWATCH_CONTRACTS
quarkus.liquibase.migrate-at-start=true

quarkus.http.port=${SERVER_PORT}
quarkus.http.test-port=0
# Exposing the health checks and metrics on :9000.
quarkus.management.enabled=true
# But disable during testing to prevent port conflict during parallel runs
%test.quarkus.management.enabled=false
quarkus.management.port=9000
quarkus.management.root-path=/

quarkus.log.handler.splunk.enabled=${ENABLE_SPLUNK_HEC:false}
quarkus.log.handler.splunk.url=${SPLUNK_HEC_URL:https://splunk-hec.redhat.com:8088/}
quarkus.log.handler.splunk.disable-certificate-validation=${SPLUNK_DISABLE_CERTIFICATE_VALIDATION:false}
quarkus.log.handler.splunk.token=${SPLUNK_HEC_TOKEN:replaceme}
quarkus.log.handler.splunk.metadata-source=${SPLUNK_SOURCE:swatch-contracts}
quarkus.log.handler.splunk.metadata-source-type=${SPLUNK_SOURCE_TYPE:quarkus_service}
quarkus.log.handler.splunk.metadata-host=${HOST_NAME:${USER}@${HOSTNAME}}
quarkus.log.handler.splunk.batch-size-count=${SPLUNK_HEC_BATCH_SIZE:1000}
quarkus.log.handler.splunk.batch-interval=${SPLUNK_HEC_BATCH_INTERVAL:10S}
quarkus.log.handler.splunk.max-retries=${SPLUNK_HEC_RETRY_COUNT:0}
quarkus.log.handler.splunk.metadata-fields.namespace=${SPLUNKMETA_namespace:local}
quarkus.log.handler.splunk.format=%d %-5p [%c{3.}] (%t) %s%e%n
quarkus.log.handler.splunk.include-exception=${SPLUNK_HEC_INCLUDE_EX:false}

# Everything on the main Splunk handler needs to be duplicated here.  The only difference is the
# source-type, the format (which we don't want to mess with), and the include-exception (which
# is not germane).  It's tedious but the configuration from the root handler *is not* inherited
quarkus.log.handler.splunk."ACCESS_LOG".enabled=${ENABLE_SPLUNK_HEC:false}
quarkus.log.handler.splunk."ACCESS_LOG".url=${SPLUNK_HEC_URL:https://splunk-hec.redhat.com:8088/}
quarkus.log.handler.splunk."ACCESS_LOG".disable-certificate-validation=${SPLUNK_DISABLE_CERTIFICATE_VALIDATION:false}
quarkus.log.handler.splunk."ACCESS_LOG".token=${SPLUNK_HEC_TOKEN:replaceme}
quarkus.log.handler.splunk."ACCESS_LOG".metadata-source=${SPLUNK_SOURCE:swatch-contracts}
quarkus.log.handler.splunk."ACCESS_LOG".metadata-source-type=access_combined
quarkus.log.handler.splunk."ACCESS_LOG".metadata-host=${HOST_NAME:${USER}@${HOSTNAME}}
quarkus.log.handler.splunk."ACCESS_LOG".batch-size-count=${SPLUNK_HEC_BATCH_SIZE:1000}
quarkus.log.handler.splunk."ACCESS_LOG".batch-interval=${SPLUNK_HEC_BATCH_INTERVAL:10S}
quarkus.log.handler.splunk."ACCESS_LOG".max-retries=${SPLUNK_HEC_RETRY_COUNT:0}
quarkus.log.handler.splunk."ACCESS_LOG".metadata-fields.namespace=${SPLUNKMETA_namespace:local}

quarkus.http.access-log.enabled=true
quarkus.http.access-log.pattern=combined

quarkus.log.category."io.quarkus.http.access-log".handlers=ACCESS_LOG
# Don't send access log messages to the root handler
quarkus.log.category."io.quarkus.http.access-log".use-parent-handlers=false
quarkus.log.category."org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext".level=DEBUG

# Disable the auto-discovery of providers (for ex: exception mappers).
# All the clients must use either the "quarkus.rest-client.*.providers" property or the `@RegisterProvider` instead.
quarkus.rest-client-reactive.provider-autodiscovery=false

quarkus.rest-client."com.redhat.swatch.clients.rh.partner.gateway.api.resources.PartnerApi".url=${ENTITLEMENT_GATEWAY_URL:http://localhost:8101}
quarkus.rest-client."com.redhat.swatch.clients.rh.partner.gateway.api.resources.PartnerApi".key-store=${KEYSTORE_RESOURCE:}
quarkus.rest-client."com.redhat.swatch.clients.rh.partner.gateway.api.resources.PartnerApi".key-store-password=${KEYSTORE_PASSWORD:}
quarkus.rest-client."com.redhat.swatch.clients.rh.partner.gateway.api.resources.PartnerApi".trust-store=${TRUSTSTORE_PATH:}
quarkus.rest-client."com.redhat.swatch.clients.rh.partner.gateway.api.resources.PartnerApi".trust-store-password=${TRUSTSTORE_PASSWORD:}
quarkus.rest-client."com.redhat.swatch.clients.rh.partner.gateway.api.resources.PartnerApi".scope=jakarta.enterprise.context.ApplicationScoped

# rest-client debug logging
# NOTE: all of uri-filter-regex, log category level, and logging.scope need to be set for a request/response to be logged.
rest-client-debug-logging.uri-filter=.*(partnerSubscriptions|search|products).*
quarkus.log.category."com.redhat.swatch.contract.config.DebugClientLogger".level=DEBUG
%test.quarkus.rest-client.logging.scope=request-response
%dev.quarkus.rest-client.logging.scope=request-response
%stage.quarkus.rest-client.logging.scope=request-response

quarkus.rest-client."com.redhat.swatch.clients.subscription.api.resources.SearchApi".url=${SUBSCRIPTION_URL:http://localhost:8102}
quarkus.rest-client."com.redhat.swatch.clients.subscription.api.resources.SearchApi".key-store=${SUBSCRIPTION_KEYSTORE:}
quarkus.rest-client."com.redhat.swatch.clients.subscription.api.resources.SearchApi".key-store-password=${SUBSCRIPTION_KEYSTORE_PASSWORD:changeit}
# SearchApi does not use any trust-store in stage/prod environments. For now, this property is only used in tests.
quarkus.rest-client."com.redhat.swatch.clients.subscription.api.resources.SearchApi".trust-store=${SUBSCRIPTION_TRUSTSTORE_PATH:}
quarkus.rest-client."com.redhat.swatch.clients.subscription.api.resources.SearchApi".trust-store-password=${SUBSCRIPTION_TRUSTSTORE_PASSWORD:}
quarkus.rest-client."com.redhat.swatch.clients.subscription.api.resources.SearchApi".scope=jakarta.enterprise.context.ApplicationScoped

# configuration properties for subscriptions-sync
quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".url=${SWATCH_INTERNAL_SUBSCRIPTION_ENDPOINT}/api/rhsm-subscriptions
quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".trust-store=${clowder.endpoints.swatch-subscription-sync-service.trust-store-path}
quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".trust-store-password=${clowder.endpoints.swatch-subscription-sync-service.trust-store-password}
quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".trust-store-type=${clowder.endpoints.swatch-subscription-sync-service.trust-store-type}
quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".providers=com.redhat.swatch.resteasy.client.SwatchPskHeaderFilter

# configuration properties for product client
rhsm-subscriptions.product.use-stub=${PRODUCT_USE_STUB:false}
quarkus.rest-client."com.redhat.swatch.clients.product.api.resources.ProductApi".uri=${PRODUCT_URL:https://product.stage.api.redhat.com/svcrest/product/v3}
quarkus.rest-client."com.redhat.swatch.clients.product.api.resources.ProductApi".key-store=${PRODUCT_KEYSTORE:}
quarkus.rest-client."com.redhat.swatch.clients.product.api.resources.ProductApi".key-store-password=${PRODUCT_KEYSTORE_PASSWORD:redhat}
# ProductApi does not use any trust-store in stage/prod environments. For now, this property is only used in tests.
quarkus.rest-client."com.redhat.swatch.clients.product.api.resources.ProductApi".trust-store=${PRODUCT_TRUSTSTORE_PATH:}
quarkus.rest-client."com.redhat.swatch.clients.product.api.resources.ProductApi".trust-store-password=${PRODUCT_TRUSTSTORE_PASSWORD:}
quarkus.rest-client."com.redhat.swatch.clients.product.api.resources.ProductApi".scope=jakarta.enterprise.context.ApplicationScoped

# rbac service configuration
RBAC_ENABLED=true
%dev.RBAC_ENABLED=false
RBAC_ENDPOINT=${clowder.endpoints.rbac-service.url}
%dev.RBAC_ENDPOINT=http://localhost:8080
%test.RBAC_ENDPOINT=http://localhost:8080
quarkus.rest-client."com.redhat.swatch.clients.rbac.api.resources.AccessApi".url=${RBAC_ENDPOINT}/api/rbac/v1
quarkus.rest-client."com.redhat.swatch.clients.rbac.api.resources.AccessApi".trust-store=${clowder.endpoints.rbac-service.trust-store-path}
quarkus.rest-client."com.redhat.swatch.clients.rbac.api.resources.AccessApi".trust-store-password=${clowder.endpoints.rbac-service.trust-store-password}
quarkus.rest-client."com.redhat.swatch.clients.rbac.api.resources.AccessApi".trust-store-type=${clowder.endpoints.rbac-service.trust-store-type}

# avoid duplicate/wrong enum names and other problems by preventing generated interfaces from being
# added back into the API spec
mp.openapi.scan.exclude.packages=com.redhat.swatch.contract.openapi

SWATCH_CONTRACT_PRODUCER_ENABLED = false

UMB_ENABLED=false
%ephemeral.UMB_ENABLED=true
%test.UMB_ENABLED=true
%stage.UMB_ENABLED=true
%prod.UMB_ENABLED=true


UMB_HOSTNAME=localhost
%ephemeral.UMB_HOSTNAME=umb.stage.api.redhat.com
%stage.UMB_HOSTNAME=umb.stage.api.redhat.com
%prod.UMB_HOSTNAME=umb.api.redhat.com

UMB_PORT=5672
%ephemeral.UMB_PORT=5671
%stage.UMB_PORT=5671
%prod.UMB_PORT=5671

CONTRACT_UMB_QUEUE=umb-contract
%ephemeral.CONTRACT_UMB_QUEUE=VirtualTopic.services.partner-entitlement-gateway
%stage.CONTRACT_UMB_QUEUE=VirtualTopic.services.partner-entitlement-gateway
%prod.CONTRACT_UMB_QUEUE=VirtualTopic.services.partner-entitlement-gateway

OFFERING_UMB_QUEUE=umb-offering
%ephemeral.OFFERING_UMB_QUEUE=VirtualTopic.canonical.operationalProduct
%stage.OFFERING_UMB_QUEUE=VirtualTopic.canonical.operationalProduct
%prod.OFFERING_UMB_QUEUE=VirtualTopic.canonical.operationalProduct

SUBSCRIPTION_UMB_QUEUE=umb-subscription
%ephemeral.SUBSCRIPTION_UMB_QUEUE=VirtualTopic.canonical.subscription
%stage.SUBSCRIPTION_UMB_QUEUE=VirtualTopic.canonical.subscription
%prod.SUBSCRIPTION_UMB_QUEUE=VirtualTopic.canonical.subscription

%ephemeral.UMB_SERVICE_ACCOUNT_NAME=nonprod-insightsrhsm-ephemeral
%stage.UMB_SERVICE_ACCOUNT_NAME=nonprod-insightsrhsm
%prod.UMB_SERVICE_ACCOUNT_NAME=insightsrhsm

amqp-host=${UMB_HOSTNAME}
amqp-port=${UMB_PORT}

# Kafka security configuration.  These properties must be present so that
# clowder-quarkus-config-source will populate them from the Clowder provided configuration JSON.
# If the properties are simply absent from this file, then clowder-quarkus-config-source will not
# set values for the property even if a value is present in the Clowder JSON.  The exception is the
# kafka.ssl.truststore.location which needs to evaluate to null for Kafka to use the system
# truststore.  Only specify kafka.ssl.truststore.location when you have an actual location to
# point to.  Don't set it to empty string.
#
# Additionally, Kafka has a bug, https://issues.apache.org/jira/browse/KAFKA-4090, where if a
# client attempts to connect to a TLS enabled port using PLAINTEXT, an OutOfMemoryException gets
# thrown instead of something more relevant to the actual issue.
kafka.sasl.jaas.config = ""
kafka.sasl.mechanism = PLAIN
kafka.security.protocol = PLAINTEXT
#kafka.ssl.truststore.location = ""
#kafka.ssl.truststore.type = PEM

quarkus.kafka.devservices.enabled=false
# Clowder quarkus config takes care of setting the common kafka settings
kafka.bootstrap.servers=localhost:9092

mp.messaging.incoming.contracts.address=${CONTRACT_UMB_QUEUE}
mp.messaging.incoming.contracts.client-options-name=umb
mp.messaging.incoming.contracts.enabled=${UMB_ENABLED}

mp.messaging.outgoing.contractstest.address=${CONTRACT_UMB_QUEUE}
mp.messaging.outgoing.contractstest.client-options-name=umb

mp.messaging.incoming.subscription-sync-task.connector=smallrye-kafka
mp.messaging.incoming.subscription-sync-task.topic=platform.rhsm-subscriptions.subscription-sync-task
mp.messaging.incoming.subscription-sync-task.group.id=subscription-worker
mp.messaging.incoming.subscription-sync-task.value.deserializer=com.redhat.swatch.contract.service.json.EnabledOrgsResponseDeserializer
mp.messaging.incoming.subscription-sync-task.failure-strategy=ignore

mp.messaging.incoming.subscription-prune-task.connector=smallrye-kafka
mp.messaging.incoming.subscription-prune-task.topic=platform.rhsm-subscriptions.subscription-prune-task
mp.messaging.incoming.subscription-prune-task.value.deserializer=com.redhat.swatch.contract.service.json.EnabledOrgsResponseDeserializer

mp.messaging.outgoing.enabled-orgs.connector=smallrye-kafka
mp.messaging.outgoing.enabled-orgs.topic=platform.rhsm-subscriptions.enabled-orgs-for-tasks
mp.messaging.outgoing.enabled-orgs.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

mp.messaging.incoming.capacity-reconcile-task.connector=smallrye-kafka
mp.messaging.incoming.capacity-reconcile-task.topic=platform.rhsm-subscriptions.capacity-reconcile
mp.messaging.incoming.capacity-reconcile-task.group.id=capacity-reconciliation-worker
mp.messaging.incoming.capacity-reconcile-task.value.deserializer=com.redhat.swatch.contract.service.json.ReconcileCapacityByOfferingTaskDeserializer

mp.messaging.outgoing.capacity-reconcile.connector=smallrye-kafka
mp.messaging.outgoing.capacity-reconcile.topic=platform.rhsm-subscriptions.capacity-reconcile
mp.messaging.outgoing.capacity-reconcile.group.id=capacity-reconciliation-worker
mp.messaging.outgoing.capacity-reconcile.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

mp.messaging.incoming.offering-sync-umb.connector=smallrye-amqp
%test.mp.messaging.incoming.offering-sync-umb.connector=smallrye-in-memory
mp.messaging.incoming.offering-sync-umb.address=${OFFERING_UMB_QUEUE}
mp.messaging.incoming.offering-sync-umb.client-options-name=umb
mp.messaging.incoming.offering-sync-umb.enabled=${UMB_ENABLED}

mp.messaging.incoming.subscription-sync-umb.connector=smallrye-amqp
%test.mp.messaging.incoming.subscription-sync-umb.connector=smallrye-in-memory
mp.messaging.incoming.subscription-sync-umb.address=${SUBSCRIPTION_UMB_QUEUE}
mp.messaging.incoming.subscription-sync-umb.client-options-name=umb
mp.messaging.incoming.subscription-sync-umb.enabled=${UMB_ENABLED}

mp.messaging.incoming.offering-sync-task.connector=smallrye-kafka
mp.messaging.incoming.offering-sync-task.topic=platform.rhsm-subscriptions.offering-sync
mp.messaging.incoming.offering-sync-task.group.id=offering-worker
mp.messaging.incoming.offering-sync-task.value.deserializer=com.redhat.swatch.contract.service.json.OfferingSyncTaskDeserializer
mp.messaging.incoming.offering-sync-task.failure-strategy=ignore

mp.messaging.outgoing.offering-sync.connector=smallrye-kafka
mp.messaging.outgoing.offering-sync.topic=platform.rhsm-subscriptions.offering-sync
mp.messaging.outgoing.offering-sync.group.id=offering-worker
mp.messaging.outgoing.offering-sync.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

mp.messaging.incoming.contracts.connector=smallrye-in-memory
mp.messaging.outgoing.contractstest.connector=smallrye-in-memory
%ephemeral.mp.messaging.incoming.contracts.connector=smallrye-amqp
%ephemeral.mp.messaging.outgoing.contractstest.connector=smallrye-in-memory
%stage.mp.messaging.incoming.contracts.connector=smallrye-amqp
%stage.mp.messaging.outgoing.contractstest.connector=smallrye-in-memory
%prod.mp.messaging.incoming.contracts.connector=smallrye-amqp
%prod.mp.messaging.outgoing.contractstest.connector=smallrye-in-memory

#This is to trace only my package and enable logging if the org exists
quarkus.log.category."com.redhat.swatch.contract.filters".level=DEBUG
FILTER_ORGS=

# otel config
quarkus.otel.sdk.disabled=true
%ephemeral.quarkus.otel.sdk.disabled=true
%wiremock.quarkus.otel.sdk.disabled=true
%stage.quarkus.otel.sdk.disabled=false
%prod.quarkus.otel.sdk.disabled=false

quarkus.hibernate-orm.mapping.timezone.default-storage=normalize-utc

quarkus.otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://splunk-otel-collector:4317}
# Metrics and logging are not yet supported - 30 Jul 2024
quarkus.otel.exporter.otlp.traces.protocol=${OTEL_EXPORTER_OTLP_PROTOCOL:grpc}

# expose swagger-ui and openapi JSON/YAML on turnpike-friendly paths
quarkus.smallrye-openapi.path=/api/${quarkus.application.name}/internal/openapi
# By default, the openapi and swagger ui endpoints are exposed on the management port, so we need to disable it
# to expose it on the server port 8000:
quarkus.smallrye-openapi.management.enabled=false
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/api/${quarkus.application.name}/internal/swagger-ui

rhsm-subscriptions.subscription-sync-enabled=${SUBSCRIPTION_SYNC_ENABLED:true}
rhsm-subscriptions.subscription-client.use-stub=${SUBSCRIPTION_CLIENT_USE_STUB:false}

# Disable Micrometer JVM-Metrics for tests.
#
# TL;DR Quarkus restarts (due to profile/configuration changes) causes memory leaks with
# Micrometer's JVM GC Metrics.
#
# See https://github.com/quarkusio/quarkus/issues/24210#issuecomment-1064833013 why OOMs, or worse,
# endless 'Retried waiting for GCLocker too often allocating * words' messages instead of a
# "proper OutOfMemoryException" happen.
%test.quarkus.micrometer.binder.jvm=false
%test.quarkus.micrometer.binder.http-client.enabled=false
%test.quarkus.micrometer.binder.http-server.enabled=false
%test.quarkus.micrometer.binder.messaging.enabled=false
%test.quarkus.micrometer.binder.mp-metrics.enabled=false
