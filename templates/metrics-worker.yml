apiVersion: v1
kind: Template
labels:
  app: rhsm-subscriptions
  template: metrics-worker
metadata:
  annotations:
    description: Request-serving components for Subscription Watch.
  name: metrics-worker

parameters:
  - name: HAWTIO_BASE_PATH
    value: /app/rhsm-metrics/actuator/hawtio
  - name: SERVER_MAX_HTTP_HEADER_SIZE
    value: '48000'
  - name: LOGGING_LEVEL_ROOT
    value: WARN
  - name: LOGGING_LEVEL
    value: INFO
  - name: KAFKA_BOOTSTRAP_HOST
    required: true
  - name: KAFKA_MESSAGE_THREADS
    value: '24'
  - name: KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS
    value: '3600000'
  - name: REPLICAS
    value: '1'
  - name: IMAGE
    value: quay.io/cloudservices/rhsm-subscriptions
  - name: IMAGE_TAG
    value: latest
  - name: IMAGE_PULL_SECRET
    value: quay-cloudservices-pull
  - name: MEMORY_REQUEST
    value: 1000Mi
  - name: MEMORY_LIMIT
    value: 1700Mi
  - name: CPU_REQUEST
    value: 450m
  - name: CPU_LIMIT
    value: 1800m
  - name: SPLUNK_FORWARDER_IMAGE
    value: quay.io/cloudservices/rhsm-splunk-forwarder:8f72cfb
  - name: SPLUNK_FORWARDER_MEMORY_REQUEST
    value: 128Mi
  - name: SPLUNK_FORWARDER_MEMORY_LIMIT
    value: 256Mi
  - name: SPLUNK_FORWARDER_CPU_REQUEST
    value: 50m
  - name: SPLUNK_FORWARDER_CPU_LIMIT
    value: 100m
  - name: CLOUDIGRADE_ENABLED
    value: 'false'
  - name: CLOUDIGRADE_HOST
    value: 'localhost'
  - name: CLOUDIGRADE_PORT
    value: '8080'
  - name: TOKEN_REFRESHER_IMAGE
    value: quay.io/observatorium/token-refresher:master-2021-02-05-5da9663
  - name: TOKEN_REFRESHER_CPU_REQUEST
    value: 50m
  - name: TOKEN_REFRESHER_CPU_LIMIT
    value: 100m
  - name: TOKEN_REFRESHER_MEMORY_REQUEST
    value: 128Mi
  - name: TOKEN_REFRESHER_MEMORY_LIMIT
    value: 150Mi
  - name: PROM_URL
    value: http://localhost:8082
  - name: DATABASE_CONNECTION_TIMEOUT_MS
    value: '30000'
  - name: DATABASE_MAX_POOL_SIZE
    value: '25'
  - name: OPENSHIFT_BILLING_MODEL_FILTER
    value: 'marketplace'

objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: metrics-worker
    spec:
      replicas: ${{REPLICAS}}
      selector:
        deploymentconfig: metrics-worker
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            deploymentconfig: metrics-worker
            prometheus: rhsm
          annotations:
            prometheus.io/path: /actuator/prometheus
            prometheus.io/port: '8080'
            prometheus.io/scrape: 'true'
        spec:
          initContainers:
            - image: ${IMAGE}:${IMAGE_TAG}
              name: liquibase
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: liquibase-only
                - name: JAVA_MAX_MEM_RATIO
                  value: '85'
                - name: GC_MAX_METASPACE_SIZE
                  value: '256'
                - name: DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.host
                - name: DATABASE_PORT
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.port
                - name: DATABASE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.user
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.password
                - name: DATABASE_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.name
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
          containers:
            - image: ${IMAGE}:${IMAGE_TAG}
              name: metrics-worker
              env:
                # turn off built-in jolokia, so that the spring boot jolokia actuator will work
                - name: AB_JOLOKIA_OFF
                  value: 'true'
                - name: SERVER_MAX_HTTP_HEADER_SIZE
                  value: ${SERVER_MAX_HTTP_HEADER_SIZE}
                - name: HAWTIO_BASE_PATH
                  value: ${HAWTIO_BASE_PATH}
                - name: LOG_FILE
                  value: /logs/server.log
                - name: SPRING_PROFILES_ACTIVE
                  value: openshift-metering-worker,kafka-queue
                - name: JAVA_MAX_MEM_RATIO
                  value: '85'
                - name: GC_MAX_METASPACE_SIZE
                  value: '256'
                - name: LOGGING_LEVEL_ROOT
                  value: ${LOGGING_LEVEL_ROOT}
                - name: LOGGING_LEVEL_ORG_CANDLEPIN
                  value: ${LOGGING_LEVEL}
                - name: KAFKA_BOOTSTRAP_HOST
                  value: ${KAFKA_BOOTSTRAP_HOST}
                - name: KAFKA_MESSAGE_THREADS
                  value: ${KAFKA_MESSAGE_THREADS}
                - name: KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS
                  value: ${KAFKA_CONSUMER_MAX_POLL_INTERVAL_MS}
                - name: DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.host
                - name: DATABASE_PORT
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.port
                - name: DATABASE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.user
                - name: DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.password
                - name: DATABASE_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: rhsm-db
                      key: db.name
                - name: DATABASE_CONNECTION_TIMEOUT_MS
                  value: ${DATABASE_CONNECTION_TIMEOUT_MS}
                - name: DATABASE_MAX_POOL_SIZE
                  value: ${DATABASE_MAX_POOL_SIZE}
                - name: INVENTORY_DATABASE_HOST
                  valueFrom:
                    secretKeyRef:
                      name: host-inventory-db-readonly
                      key: db.host
                - name: INVENTORY_DATABASE_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: host-inventory-db-readonly
                      key: db.name
                - name: INVENTORY_DATABASE_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: host-inventory-db-readonly
                      key: db.user
                - name: INVENTORY_DATABASE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: host-inventory-db-readonly
                      key: db.password
                - name: CLOUDIGRADE_ENABLED
                  value: ${CLOUDIGRADE_ENABLED}
                - name: CLOUDIGRADE_HOST
                  value: ${CLOUDIGRADE_HOST}
                - name: CLOUDIGRADE_PORT
                  value: ${CLOUDIGRADE_PORT}
                - name: PROM_URL
                  value: ${PROM_URL}
                - name: OPENSHIFT_BILLING_MODEL_FILTER
                  value: ${OPENSHIFT_BILLING_MODEL_FILTER}
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /actuator/health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 90
                periodSeconds: 20
                successThreshold: 1
                timeoutSeconds: 3
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              ports:
                - containerPort: 8080
                  protocol: TCP
              volumeMounts:
                - name: config
                  mountPath: /config
                - name: logs
                  mountPath: /logs
              workingDir: /
            - name: splunk
              env:
                - name: SPLUNKMETA_namespace
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
              image: ${SPLUNK_FORWARDER_IMAGE}
              resources:
                requests:
                  cpu: ${SPLUNK_FORWARDER_CPU_REQUEST}
                  memory: ${SPLUNK_FORWARDER_MEMORY_REQUEST}
                limits:
                  cpu: ${SPLUNK_FORWARDER_CPU_LIMIT}
                  memory: ${SPLUNK_FORWARDER_MEMORY_LIMIT}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/log/app
                  name: logs
                  readOnly: true
                - mountPath: /tls/splunk.pem
                  name: splunk
                  subPath: splunk.pem
            - name: token-refresher
              image: ${TOKEN_REFRESHER_IMAGE}
              args:
                - '--oidc.audience=observatorium-telemeter'
                - '--oidc.client-id=$(CLIENT_ID)'
                - '--oidc.client-secret=$(CLIENT_SECRET)'
                - '--oidc.issuer-url=$(ISSUER_URL)'
                - '--url=$(URL)'
                - '--web.listen=:8082'
              env:
                - name: CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: token-refresher
                      key: CLIENT_ID
                - name: CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: token-refresher
                      key: CLIENT_SECRET
                - name: ISSUER_URL
                  valueFrom:
                    secretKeyRef:
                      name: token-refresher
                      key: ISSUER_URL
                - name: URL
                  valueFrom:
                    secretKeyRef:
                      name: token-refresher
                      key: URL
              resources:
                requests:
                  cpu: ${TOKEN_REFRESHER_CPU_REQUEST}
                  memory: ${TOKEN_REFRESHER_MEMORY_REQUEST}
                limits:
                  cpu: ${TOKEN_REFRESHER_CPU_LIMIT}
                  memory: ${TOKEN_REFRESHER_MEMORY_LIMIT}
          volumes:
            - name: config
              configMap:
                name: rhsm-subscriptions-config
            - name: splunk
              secret:
                secretName: splunk
            - name: logs
              emptyDir:
          restartPolicy: Always
          terminationGracePeriodSeconds: 75
          imagePullSecrets:
            - name: ${IMAGE_PULL_SECRET}
            - name: quay-cloudservices-pull
      triggers:
        - type: ConfigChange

  - apiVersion: v1
    kind: Service
    metadata:
      name: metrics-worker-monitoring
      labels:
        prometheus: rhsm
    spec:
      ports:
        - port: 8080
          name: "8080"
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: metrics-worker
