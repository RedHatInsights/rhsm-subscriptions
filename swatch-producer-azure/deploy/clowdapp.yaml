---
apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: swatch-producer-azure
parameters:
  - name: JAVA_DEBUG
    # Set to "true" to enable remote debugging
    value: ''
  - name: QUARKUS_LAUNCH_DEVMODE
    value: ''
  - name: IMAGE_PULL_SECRET
    value: quay-cloudservices-pull
  - name: MEMORY_REQUEST
    value: 512Mi
  - name: MEMORY_LIMIT
    value: 512Mi
  - name: CPU_REQUEST
    value: 200m
  - name: CPU_LIMIT
    value: '1'
  - name: ENV_NAME
    value: env-swatch-producer-azure
  - name: REPLICAS
    value: '1'
  - name: IMAGE
    value: quay.io/cloudservices/swatch-producer-azure
  - name: IMAGE_TAG
    value: latest
  - name: LOGGING_LEVEL_ROOT
    value: 'INFO'
  - name: LOGGING_LEVEL_COM_REDHAT_SWATCH
    value: 'INFO'
  - name: KAFKA_SEEK_OVERRIDE_END
    value: 'false'
  - name: KAFKA_SEEK_OVERRIDE_TIMESTAMP
    value: ''
  - name: KAFKA_BILLABLE_USAGE_REPLICAS
    value: '3'
  - name: KAFKA_BILLABLE_USAGE_PARTITIONS
    value: '3'
  - name: QUARKUS_PROFILE
    value: prod
  - name: ENABLE_AZURE_DRY_RUN
    value: 'true'
  - name: DISABLE_OTEL
    value: 'false'

objects:
- apiVersion: cloud.redhat.com/v1alpha1
  kind: ClowdApp
  metadata:
    name: swatch-producer-azure
    labels:
      prometheus: quarkus
  spec:
    envName: ${ENV_NAME}
    dependencies:
      - swatch-contracts
      - swatch-billable-usage

    providers:
      sidecars:
        otelCollector:
          enabled: true
          image: quay.io/signalfx/splunk-otel-collector:0.125.0
          configMap: splunk-otel-collector-config
          envVars:
            - name: SPLUNK_MEMORY_TOTAL_MIB
              value: "1024"
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: K8S_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: K8S_POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: SPLUNK_OBSERVABILITY_ACCESS_TOKEN
              valueFrom:
                secretKeyRef:
                  name: signalfx
                  key: token
                  optional: true

    kafkaTopics:
      - replicas: ${{KAFKA_BILLABLE_USAGE_REPLICAS}}
        partitions: ${{KAFKA_BILLABLE_USAGE_PARTITIONS}}
        topicName: platform.rhsm-subscriptions.billable-usage
      - replicas: ${{KAFKA_BILLABLE_USAGE_REPLICAS}}
        partitions: ${{KAFKA_BILLABLE_USAGE_PARTITIONS}}
        topicName: platform.rhsm-subscriptions.billable-usage-hourly-aggregate

    pullSecrets:
      name: ${IMAGE_PULL_SECRET}

    deployments:
      - name: service
        replicas: ${{REPLICAS}}
        webServices:
          public:
            enabled: true
        podSpec:
          image: ${IMAGE}:${IMAGE_TAG}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/live
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health/ready
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            requests:
              cpu: ${CPU_REQUEST}
              memory: ${MEMORY_REQUEST}
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
          env:
            - name: JAVA_DEBUG
              value: ${JAVA_DEBUG}
            - name: QUARKUS_LAUNCH_DEVMODE
              value: ${QUARKUS_LAUNCH_DEVMODE}
            - name: LOGGING_LEVEL_ROOT
              value: ${LOGGING_LEVEL_ROOT}
            - name: LOGGING_LEVEL_COM_REDHAT_SWATCH
              value: ${LOGGING_LEVEL_COM_REDHAT_SWATCH}
            - name: SPLUNKMETA_namespace
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: HOST_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: SPLUNK_HEC_TOKEN
              valueFrom:
                secretKeyRef:
                  name: splunk-hec-external
                  key: token
            - name: SWATCH_SELF_PSK
              valueFrom:
                secretKeyRef:
                  name: swatch-psks
                  key: self
            - name: KAFKA_SEEK_OVERRIDE_END
              value: ${KAFKA_SEEK_OVERRIDE_END}
            - name: KAFKA_SEEK_OVERRIDE_TIMESTAMP
              value: ${KAFKA_SEEK_OVERRIDE_TIMESTAMP}
            - name: QUARKUS_PROFILE
              value: ${QUARKUS_PROFILE}
            - name: ENABLE_AZURE_DRY_RUN
              value: ${ENABLE_AZURE_DRY_RUN}
            - name: DISABLE_OTEL
              value: ${DISABLE_OTEL}
            - name: AZURE_MARKETPLACE_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: azure-marketplace-credentials
                  key: credentials
          volumeMounts:
            - name: logs
              mountPath: /logs
          volumes:
            - name: logs
              emptyDir:

- apiVersion: v1
  kind: Secret
  metadata:
    name: swatch-psks
  data:
    self: cGxhY2Vob2xkZXI=

- apiVersion: v1
  kind: Secret
  metadata:
    name: azure-marketplace-credentials
  data:
    # Decodes to:
    # {"credentials":{"azure":{"clients":[{"tenantId":"test","clientId":"test","clientSecret":"test","publisher":"test"}]}}}
    credentials: eyJjcmVkZW50aWFscyI6eyJhenVyZSI6eyJjbGllbnRzIjpbeyJ0ZW5hbnRJZCI6InRlc3QiLCJjbGllbnRJZCI6InRlc3QiLCJjbGllbnRTZWNyZXQiOiJ0ZXN0IiwicHVibGlzaGVyIjoidGVzdCJ9XX19fQ==

# TODO populate access token into environment
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: splunk-otel-collector-config
  data:
    config.yaml: |
      exporters:
        # SignalFx SAPM for traces - only when token available (stage, prod)
        sapm:
          access_token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
          endpoint: https://ingest.us1.signalfx.com/v2/trace
          sending_queue:
            num_consumers: 32
        # SignalFx for metrics - only when token available (stage, prod)
        signalfx:
          access_token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
          api_url: https://api.us1.signalfx.com
          ingest_url: https://ingest.us1.signalfx.com
          sending_queue:
            num_consumers: 32
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
        http_forwarder:
          egress:
            endpoint: https://api.us1.signalfx.com
        zpages: null
      processors:
        batch: null
        filter/logs:
          logs:
            exclude:
              match_type: strict
              resource_attributes:
              - key: splunk.com/exclude
                value: "true"
        k8sattributes:
          extract:
            annotations:
            - from: pod
              key: splunk.com/sourcetype
            - from: namespace
              key: splunk.com/exclude
              tag_name: splunk.com/exclude
            - from: pod
              key: splunk.com/exclude
              tag_name: splunk.com/exclude
            - from: namespace
              key: splunk.com/index
              tag_name: com.splunk.index
            - from: pod
              key: splunk.com/index
              tag_name: com.splunk.index
            labels:
            - key: app
            metadata:
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.name
            - k8s.pod.uid
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.uid
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
          - sources:
            - from: resource_attribute
              name: ip
          - sources:
            - from: connection
          - sources:
            - from: resource_attribute
              name: host.name
        memory_limiter:
          check_interval: 2s
          limit_mib: ${SPLUNK_MEMORY_LIMIT_MIB}
        resource/add_cluster_name:
          attributes:
          - action: upsert
            key: k8s.cluster.name
            value: ${K8S_CLUSTER_NAME}
        resource/add_collector_k8s:
          attributes:
          - action: insert
            key: k8s.node.name
            value: ${K8S_NODE_NAME}
          - action: insert
            key: k8s.pod.name
            value: ${K8S_POD_NAME}
          - action: insert
            key: k8s.pod.uid
            value: ${K8S_POD_UID}
          - action: insert
            key: k8s.namespace.name
            value: ${K8S_NAMESPACE}
        resource/add_env_name:
          attributes:
          - action: insert
            key: deployment.environment
            value: ${ENV_NAME}
        resource/logs:
          attributes:
          - action: upsert
            from_attribute: k8s.pod.annotations.splunk.com/sourcetype
            key: com.splunk.sourcetype
          - action: delete
            key: k8s.pod.annotations.splunk.com/sourcetype
          - action: delete
            key: splunk.com/exclude
        resourcedetection:
          detectors:
          - env
          - system
          override: true
          timeout: 10s
      receivers:
        jaeger:
          protocols:
            grpc:
              endpoint: 0.0.0.0:14250
            thrift_http:
              endpoint: 0.0.0.0:14268
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
            http:
              endpoint: 0.0.0.0:4318
        prometheus/collector:
          config:
            scrape_configs:
            - job_name: otel-collector
              metric_relabel_configs:
              - action: drop
                regex: otelcol_rpc_.*
                source_labels:
                - __name__
              - action: drop
                regex: otelcol_http_.*
                source_labels:
                - __name__
              - action: drop
                regex: otelcol_processor_batch_.*
                source_labels:
                - __name__
              scrape_interval: 10s
              static_configs:
              - targets:
                - ${K8S_POD_IP}:8889
        signalfx:
          access_token_passthrough: true
          endpoint: 0.0.0.0:9943
        zipkin:
          endpoint: 0.0.0.0:9411
      service:
        extensions:
        - health_check
        - zpages
        - http_forwarder
        pipelines:
          # SignalFx pipelines - only work in stage/prod with SignalFx token
          logs/signalfx-events:
            exporters:
            - signalfx
            processors:
            - memory_limiter
            - batch
            receivers:
            - signalfx
          metrics/signalfx:
            exporters:
            - signalfx
            processors:
            - memory_limiter
            - batch
            - resource/add_cluster_name
            - resource/add_env_name
            receivers:
            - otlp
          traces/splunk:
            exporters:
            - splunk_hec
            processors:
            - memory_limiter
            - k8sattributes
            - batch
            - resource/add_cluster_name
            - resource/add_env_name
            receivers:
            - otlp
            - jaeger
            - zipkin
          # Secondary pipelines - only work in stage/prod with SignalFx token
          logs/signalfx-events:
            exporters:
            - signalfx
            processors:
            - memory_limiter
            - batch
            receivers:
            - signalfx
          metrics/signalfx:
            exporters:
            - signalfx
            processors:
            - memory_limiter
            - batch
            - resource/add_cluster_name
            - resource/add_env_name
            receivers:
            - signalfx
          traces/signalfx:
            exporters:
            - sapm
            processors:
            - memory_limiter
            - k8sattributes
            - batch
            - resource/add_cluster_name
            - resource/add_env_name
            receivers:
            - otlp
            - jaeger
            - zipkin
          # Collector self-monitoring
          metrics/collector:
            exporters:
            - signalfx
            processors:
            - memory_limiter
            - batch
            - resource/add_collector_k8s
            - resourcedetection
            - resource/add_cluster_name
            - resource/add_env_name
            receivers:
            - prometheus/collector
        telemetry:
          logs:
            level: "debug"
          metrics:
            address: 0.0.0.0:8889
