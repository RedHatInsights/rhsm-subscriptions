plugins {
    id 'swatch.quarkus-conventions'
    id 'org.openapi.generator'
}

dependencies {
    compileOnly libraries["lombok"]
    implementation platform(libraries["awssdk-bom"])
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation 'io.quarkus:quarkus-jackson'
    implementation 'io.quarkus:quarkus-logging-json'
    implementation 'io.quarkus:quarkus-micrometer-registry-prometheus'
    implementation 'io.quarkus:quarkus-opentelemetry'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-smallrye-fault-tolerance'
    implementation 'io.quarkus:quarkus-smallrye-openapi'
    implementation 'io.quarkus:quarkus-messaging-kafka'
    implementation 'software.amazon.awssdk:marketplacemetering'
    implementation 'software.amazon.awssdk:sts'
    implementation libraries["clowder-quarkus-config-source"]
    implementation project(":clients:quarkus:contracts-client")
    implementation project(":swatch-model-billable-usage")
    implementation project(":swatch-common-resteasy")
    implementation project(":swatch-product-configuration")
    implementation project(":swatch-common-kafka")
    implementation project(":swatch-common-resteasy-client")
    implementation project(':swatch-common-trace-response')
    implementation project(':swatch-common-smallrye-fault-tolerance')
    implementation project(':swatch-common-splunk')
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'io.smallrye.reactive:smallrye-reactive-messaging-in-memory'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation libraries["junit-jupiter"]
    testImplementation libraries["wiremock"]
    testImplementation project(':swatch-common-testcontainers')
}

compileJava.dependsOn tasks.openApiGenerate, tasks.compileQuarkusGeneratedSourcesJava

openApiGenerate {
    generatorName = "java"
    inputSpec = "${projectDir}/src/main/resources/META-INF/openapi.yaml"
    outputDir = "${buildDir}/generated"
    apiPackage = "com.redhat.swatch.aws.openapi.resource"
    modelPackage = "com.redhat.swatch.aws.openapi.model"
    invokerPackage = "com.redhat.swatch.aws.openapi"
    groupId = "com.redhat.swatch.aws"
    ignoreFileOverride = "${projectDir}/.openapi-generator-ignore"
    configOptions = [
            sourceFolder         : "src/gen/java",
            interfaceOnly        : "true",
            library: "microprofile",
            java8: "true",
            dateLibrary: "java8",
            serializationLibrary: "jackson",
            microprofileRestClientVersion: "3.0",
            useJakartaEE: "true",
    ]
    additionalProperties = [
            disableMultipart: "true", // see https://github.com/OpenAPITools/openapi-generator/pull/4713#issuecomment-633906581
    ]
    importMappings = [
            "BillableUsage": "org.candlepin.subscriptions.billable.usage.BillableUsage"
    ]
}

sourceSets.main.java.srcDirs += ["${buildDir}/generated/src/gen/java"]
