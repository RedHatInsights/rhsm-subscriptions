SERVER_PORT=${clowder.endpoints.swatch-producer-aws.port:8000}
LOGGING_LEVEL_COM_REDHAT_SWATCH=INFO
LOGGING_LEVEL_ROOT=INFO
SWATCH_INTERNAL_SUBSCRIPTION_ENDPOINT=${clowder.endpoints.swatch-subscription-sync-service.url}
AWS_REGION=us-east-1
AWS_MANUAL_SUBMISSION_ENABLED=false
AWS_SEND_RETRIES=0
AWS_USAGE_CONTEXT_LOOKUP_RETRIES=0
AWS_MARKETPLACE_ENDPOINT_OVERRIDE=false
AWS_MARKETPLACE_USAGE_WINDOW=6h
ENABLE_SPLUNK_HEC=true
SPLUNK_HEC_URL=https://splunk-hec.redhat.com:8088/
SPLUNK_SOURCE=swatch-producer-aws
SPLUNK_SOURCE_TYPE=quarkus_service
SPLUNK_HEC_BATCH_SIZE=1000
SPLUNK_HEC_BATCH_INTERVAL=10S
SPLUNK_HEC_RETRY_COUNT=3
SPLUNK_HEC_INCLUDE_EX=false
BILLABLE_USAGE_HOURLY_AGGREGATE_TOPIC=platform.rhsm-subscriptions.billable-usage-hourly-aggregate
USAGE_AGGREGATE_FAIL_ON_DESER_FAILURE=true

# dev-specific defaults; these can still be overridden by env var
%dev.LOGGING_LEVEL_COM_REDHAT_SWATCH=DEBUG
%dev.AWS_CREDENTIALS_JSON=[{"accessKeyId":"accessKey","secretAccessKey":"placeholder","sellerAccount":"awsSellerAccountId"}]
%dev.SWATCH_INTERNAL_SUBSCRIPTION_ENDPOINT=http://localhost:8101
%dev.AWS_MARKETPLACE_ENDPOINT_URL=http://localhost:8101/aws-marketplace/
%dev.AWS_MARKETPLACE_ENDPOINT_OVERRIDE=true
%dev.AWS_MANUAL_SUBMISSION_ENABLED=true
%dev.SWATCH_SELF_PSK=placeholder
%dev.ENABLE_SPLUNK_HEC=false
%dev.SPLUNK_HEC_URL=https://splunk-hec.prod.utility-us-east-2.redhat.com:8088/
%dev.HOST_NAME=${USER}@${HOSTNAME}
%dev.SPLUNKMETA_namespace=local
%dev.SPLUNK_HEC_INCLUDE_EX=true
%dev.SPLUNK_DISABLE_CERTIFICATE_VALIDATION=true

# set the test profile properties to the same values as dev; these get activated for @QuarkusTest
%test.AWS_CREDENTIALS_JSON=${%dev.AWS_CREDENTIALS_JSON}
%test.SWATCH_INTERNAL_SUBSCRIPTION_ENDPOINT=${%dev.SWATCH_INTERNAL_SUBSCRIPTION_ENDPOINT}
%test.AWS_MARKETPLACE_ENDPOINT_URL=${%dev.AWS_MARKETPLACE_ENDPOINT_URL}
%test.AWS_MARKETPLACE_ENDPOINT_OVERRIDE=${%dev.AWS_MARKETPLACE_ENDPOINT_OVERRIDE}
%test.AWS_MANUAL_SUBMISSION_ENABLED=${%dev.AWS_MANUAL_SUBMISSION_ENABLED}
%test.SWATCH_SELF_PSK=${%dev.SWATCH_SELF_PSK}
%test.ENABLE_SPLUNK_HEC=${%dev.ENABLE_SPLUNK_HEC}
%test.HOST_NAME=unit_tests

# dev-specific config items that don't need to be overridden via env var
# do not use JSON logs in dev mode
%dev.quarkus.log.console.json=false
quarkus.log.level=${LOGGING_LEVEL_ROOT}
quarkus.log.category."com.redhat.swatch".level=${LOGGING_LEVEL_COM_REDHAT_SWATCH}
quarkus.log.category."org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext".level=DEBUG

quarkus.http.port=${SERVER_PORT}
# make quarkus choose a dynamic port for testing to avoid port collisions w/ simultaneous tests
quarkus.http.test-port=0
# Exposing the health checks and metrics on :9000.
quarkus.management.enabled=true
# But disable during testing to prevent port conflict during parallel runs
%test.quarkus.management.enabled=false
quarkus.management.port=9000
quarkus.management.root-path=/

# expose swagger-ui and openapi JSON/YAML on turnpike-friendly paths
quarkus.smallrye-openapi.path=/api/${quarkus.application.name}/internal/openapi
# By default, the openapi and swagger ui endpoints are exposed on the management port, so we need to disable it
# to expose it on the server port 8000:
quarkus.smallrye-openapi.management.enabled=false
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/api/${quarkus.application.name}/internal/swagger-ui

#clowder quarkus config takes care of setting the common kafka settings
kafka.bootstrap.servers=localhost:9092

# Kafka security configuration.  These properties must be present so that
# clowder-quarkus-config-source will populate them from the Clowder provided configuration JSON.
# If the properties are simply absent from this file, then clowder-quarkus-config-source will not
# set values for the property even if a value is present in the Clowder JSON.
#
# Additionally, Kafka has a bug, https://issues.apache.org/jira/browse/KAFKA-4090, where if a
# client attempts to connect to a TLS enabled port using PLAINTEXT, an OutOfMemoryException gets
# thrown instead of something more relevant to the actual issue.
kafka.sasl.jaas.config = ""
kafka.sasl.mechanism = PLAIN
kafka.security.protocol = PLAINTEXT
#kafka.ssl.truststore.location = ""
#kafka.ssl.truststore.type = PEM

quarkus.reactive-messaging.kafka.serializer-generation.enabled=false

# Consumer settings
mp.messaging.incoming.billable-usage-hourly-aggregate-in.fail-on-deserialization-failure=${USAGE_AGGREGATE_FAIL_ON_DESER_FAILURE}
mp.messaging.incoming.billable-usage-hourly-aggregate-in.connector=smallrye-kafka
mp.messaging.incoming.billable-usage-hourly-aggregate-in.topic=${BILLABLE_USAGE_HOURLY_AGGREGATE_TOPIC}
mp.messaging.incoming.billable-usage-hourly-aggregate-in.group.id=swatch-producer-aws-usage-aggregate-consumer
# Start at end of topic to prevent duplicate billing
mp.messaging.incoming.billable-usage-hourly-aggregate-in.auto.offset.reset=latest
mp.messaging.incoming.billable-usage-hourly-aggregate-in.value.deserializer=org.candlepin.subscriptions.billable.usage.BillableUsageAggregateDeserializer

# Producer settings
mp.messaging.outgoing.tally-out.connector=smallrye-kafka
mp.messaging.outgoing.tally-out.topic=platform.rhsm-subscriptions.billable-usage
mp.messaging.outgoing.tally-out.value.serializer=org.candlepin.subscriptions.billable.usage.BillableUsageSerializer

quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".url=${SWATCH_INTERNAL_SUBSCRIPTION_ENDPOINT}/api/rhsm-subscriptions/v1
quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".trust-store=${clowder.endpoints.swatch-subscription-sync-service.trust-store-path}
quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".trust-store-password=${clowder.endpoints.swatch-subscription-sync-service.trust-store-password}
quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".trust-store-type=${clowder.endpoints.swatch-subscription-sync-service.trust-store-type}
quarkus.rest-client."com.redhat.swatch.clients.swatch.internal.subscription.api.resources.InternalSubscriptionsApi".providers=com.redhat.swatch.resteasy.client.SwatchPskHeaderFilter, com.redhat.swatch.aws.resource.DefaultApiExceptionMapper
com.redhat.swatch.processors.BillableUsageProcessor/lookupAwsUsageContext/Retry/maxRetries=${AWS_USAGE_CONTEXT_LOOKUP_RETRIES}
com.redhat.swatch.processors.BillableUsageProcessor/send/Retry/maxRetries=${AWS_SEND_RETRIES}

quarkus.log.handler.splunk.enabled=${ENABLE_SPLUNK_HEC:false}
quarkus.log.handler.splunk.url=${SPLUNK_HEC_URL:https://splunk-hec.redhat.com:8088/}
quarkus.log.handler.splunk.disable-certificate-validation=${SPLUNK_DISABLE_CERTIFICATE_VALIDATION:false}
quarkus.log.handler.splunk.token=${SPLUNK_HEC_TOKEN:replaceme}
quarkus.log.handler.splunk.metadata-source=${SPLUNK_SOURCE:swatch-producer-aws}
quarkus.log.handler.splunk.metadata-source-type=${SPLUNK_SOURCE_TYPE:quarkus_service}
quarkus.log.handler.splunk.metadata-host=${HOST_NAME:${USER}@${HOSTNAME}}
quarkus.log.handler.splunk.batch-size-count=${SPLUNK_HEC_BATCH_SIZE:1000}
quarkus.log.handler.splunk.batch-interval=${SPLUNK_HEC_BATCH_INTERVAL:10S}
quarkus.log.handler.splunk.max-retries=${SPLUNK_HEC_RETRY_COUNT:0}
quarkus.log.handler.splunk.metadata-fields.namespace=${SPLUNKMETA_namespace:local}
quarkus.log.handler.splunk.format=%d %-5p [%c{3.}] (%t) %s%e%n
quarkus.log.handler.splunk.include-exception=${SPLUNK_HEC_INCLUDE_EX:false}

# otel config
quarkus.otel.sdk.disabled=true
%ephemeral.quarkus.otel.sdk.disabled=true
%stage.quarkus.otel.sdk.disabled=false
%prod.quarkus.otel.sdk.disabled=false

quarkus.otel.exporter.otlp.endpoint=http://splunk-otel-collector:4317
