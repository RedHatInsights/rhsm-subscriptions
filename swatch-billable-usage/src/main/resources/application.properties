SERVER_PORT=${clowder.endpoints.swatch-billable-usage.port:8000}
LOGGING_LEVEL_COM_REDHAT_SWATCH=INFO
LOGGING_LEVEL_ROOT=INFO
ENABLE_SPLUNK_HEC=true
SPLUNK_HEC_URL=https://splunk-hec.redhat.com:8088/
SPLUNK_SOURCE=${quarkus.application.name}
SPLUNK_SOURCE_TYPE=quarkus_service
SPLUNK_HEC_BATCH_SIZE=1000
SPLUNK_HEC_BATCH_INTERVAL=10S
SPLUNK_HEC_RETRY_COUNT=3
SPLUNK_HEC_INCLUDE_EX=true
CORS_ORIGINS=/.+.redhat.com/

DATABASE_HOST=${clowder.database.hostname:localhost}
DATABASE_PORT=${clowder.database.port:5432}
DATABASE_DATABASE=${clowder.database.name:rhsm-subscriptions}
DATABASE_USERNAME=${clowder.database.username:rhsm-subscriptions}
DATABASE_PASSWORD=${clowder.database.password:rhsm-subscriptions}

BILLABLE_USAGE_TOPIC=platform.rhsm-subscriptions.billable-usage
BILLABLE_USAGE_HOURLY_AGGREGATE_TOPIC=platform.rhsm-subscriptions.billable-usage-hourly-aggregate
KSTREAM_BILLABLE_USAGE_STORE=billable-usage-store
KSTREAM_BILLABLE_USAGE_SUPPRESS_STORE=billable-usage-suppress
KSTREAM_BILLABLE_USAGE_AGGREGATION_WINDOW_DURATION=3600s
KSTREAM_BILLABLE_USAGE_AGGREGATION_GRACE_DURATION=600s
KAFKA_BILLABLE_USAGE_PARTITIONS=1

%ephemeral.KSTREAM_BILLABLE_USAGE_AGGREGATION_WINDOW_DURATION=3s
%ephemeral.KSTREAM_BILLABLE_USAGE_AGGREGATION_GRACE_DURATION=0s

# dev-specific defaults; these can still be overridden by env var
%dev.LOGGING_LEVEL_COM_REDHAT_SWATCH=DEBUG
%dev.SWATCH_SELF_PSK=placeholder
%dev.ENABLE_SPLUNK_HEC=false
%dev.SPLUNK_HEC_URL=https://splunk-hec.prod.utility-us-east-2.redhat.com:8088/
%dev.HOST_NAME=${USER}@${HOSTNAME}
%dev.SPLUNKMETA_namespace=local
%dev.SPLUNK_HEC_INCLUDE_EX=true
%dev.SPLUNK_DISABLE_CERTIFICATE_VALIDATION=true
%dev.CORS_ORIGINS=/.*/

# set the test profile properties to the same values as dev; these get activated for @QuarkusTest
%test.SWATCH_SELF_PSK=${%dev.SWATCH_SELF_PSK}
%test.ENABLE_SPLUNK_HEC=${%dev.ENABLE_SPLUNK_HEC}
%test.HOST_NAME=unit_tests

# dev-specific config items that don't need to be overridden via env var
# do not use JSON logs in dev mode
quarkus.log.level=${LOGGING_LEVEL_ROOT}
quarkus.log.category."com.redhat.swatch".level=${LOGGING_LEVEL_COM_REDHAT_SWATCH}
quarkus.log.category."org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext".level=DEBUG

quarkus.http.port=${SERVER_PORT}
# make quarkus choose a dynamic port for testing to avoid port collisions w/ simultaneous tests
quarkus.http.test-port=0
quarkus.http.cors=true
quarkus.http.cors.origins=${CORS_ORIGINS}
quarkus.http.access-log.enabled=true
quarkus.http.access-log.pattern=combined
# Exposing the health checks and metrics on :9000.
quarkus.management.enabled=true
quarkus.management.port=9000
quarkus.management.root-path=/

# database configuration
quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DATABASE_USERNAME}
quarkus.datasource.password=${DATABASE_PASSWORD}
quarkus.datasource.jdbc.url=jdbc:postgresql://${DATABASE_HOST}:${DATABASE_PORT}/${DATABASE_DATABASE}?ApplicationName=${quarkus.application.name:swatch-billable-usage}
quarkus.hibernate-orm.database.generation=validate
quarkus.hibernate-orm.log.sql=${LOGGING_SHOW_SQL_QUERIES:false}

%test.quarkus.datasource.db-kind=h2
# NOTE: because some of the entities use columns named "value", it is necessary to configure h2 to *not* treat it as a keyword.
%test.quarkus.datasource.jdbc.url=jdbc:h2:mem:db;NON_KEYWORDS=VALUE
%test.quarkus.hibernate-orm.dialect=org.hibernate.dialect.H2Dialect
%test.quarkus.hibernate-orm.database.generation=drop-and-create

#clowder quarkus config takes care of setting the common kafka settings
kafka.bootstrap.servers=localhost:9092

# Kafka security configuration.  These properties must be present so that
# clowder-quarkus-config-source will populate them from the Clowder provided configuration JSON.
# If the properties are simply absent from this file, then clowder-quarkus-config-source will not
# set values for the property even if a value is present in the Clowder JSON.  The exception is the
# kafka.ssl.truststore.location which needs to evaluate to null for Kafka to use the system
# truststore.  Only specify kafka.ssl.truststore.location when you have an actual location to
# point to.  Don't set it to empty string.
#
# Additionally, Kafka has a bug, https://issues.apache.org/jira/browse/KAFKA-4090, where if a
# client attempts to connect to a TLS enabled port using PLAINTEXT, an OutOfMemoryException gets
# thrown instead of something more relevant to the actual issue.
kafka.sasl.jaas.config = ""
kafka.sasl.mechanism = PLAIN
kafka.security.protocol = PLAINTEXT
#kafka.ssl.truststore.location = ""
#kafka.ssl.truststore.type = PEM

quarkus.kafka-streams.bootstrap-servers=${kafka.bootstrap.servers:localhost:9092}
quarkus.kafka-streams.application-server=${HOST}:${SERVER_PORT}
quarkus.kafka-streams.application-id=platform.rhsm-subscriptions.swatch-billable-usage-aggregator
quarkus.kafka-streams.topics=${BILLABLE_USAGE_TOPIC},${BILLABLE_USAGE_HOURLY_AGGREGATE_TOPIC}

# pass-through options
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=latest

mp.messaging.outgoing.billable-usage-out.connector=smallrye-kafka
mp.messaging.outgoing.billable-usage-out.topic=${BILLABLE_USAGE_TOPIC}
mp.messaging.outgoing.billable-usage-out.value.serializer=org.candlepin.subscriptions.billable.usage.BillableUsageSerializer

mp.messaging.outgoing.billable-usage-aggregation-repartition-out.connector=smallrye-kafka
mp.messaging.outgoing.billable-usage-aggregation-repartition-out.topic=platform.rhsm-subscriptions.swatch-billable-usage-aggregator-billable-usage-store-repartition
mp.messaging.outgoing.billable-usage-aggregation-repartition-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.outgoing.billable-usage-aggregation-repartition-out.key.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

mp.messaging.incoming.billable-usage-status-in.connector=smallrye-kafka
mp.messaging.incoming.billable-usage-status-in.topic=platform.rhsm-subscriptions.billable-usage.status
mp.messaging.incoming.billable-usage-status-in.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
mp.messaging.incoming.billable-usage-status-in.key.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

mp.messaging.incoming.billable-usage-dlt.connector=smallrye-kafka
mp.messaging.incoming.billable-usage-dlt.topic=platform.rhsm-subscriptions.billable-usage.dlt
mp.messaging.incoming.billable-usage-dlt.deserializer=org.candlepin.subscriptions.billable.usage.BillableUsageDeserializer

mp.messaging.incoming.remittances-purge-task.connector=smallrye-kafka
mp.messaging.incoming.remittances-purge-task.topic=platform.rhsm-subscriptions.remittances-purge-task
mp.messaging.incoming.remittances-purge-task.value.deserializer=com.redhat.swatch.billable.usage.services.json.EnabledOrgsResponseDeserializer

mp.messaging.outgoing.enabled-orgs.connector=smallrye-kafka
mp.messaging.outgoing.enabled-orgs.topic=platform.rhsm-subscriptions.enabled-orgs-for-tasks
mp.messaging.outgoing.enabled-orgs.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer

mp.messaging.incoming.tally-summary.connector=smallrye-kafka
mp.messaging.incoming.tally-summary.topic=platform.rhsm-subscriptions.tally
mp.messaging.incoming.tally-summary.value.deserializer=com.redhat.swatch.billable.usage.services.json.TallySummaryDeserializer

quarkus.log.handler.splunk.enabled=${ENABLE_SPLUNK_HEC:false}
quarkus.log.handler.splunk.url=${SPLUNK_HEC_URL:https://splunk-hec.redhat.com:8088/}
quarkus.log.handler.splunk.disable-certificate-validation=${SPLUNK_DISABLE_CERTIFICATE_VALIDATION:false}
quarkus.log.handler.splunk.token=${SPLUNK_HEC_TOKEN:replaceme}
quarkus.log.handler.splunk.metadata-source=${SPLUNK_SOURCE:swatch-producer-aws}
quarkus.log.handler.splunk.metadata-source-type=${SPLUNK_SOURCE_TYPE:quarkus_service}
quarkus.log.handler.splunk.metadata-host=${HOST_NAME:${USER}@${HOSTNAME}}
quarkus.log.handler.splunk.batch-size-count=${SPLUNK_HEC_BATCH_SIZE:1000}
quarkus.log.handler.splunk.batch-interval=${SPLUNK_HEC_BATCH_INTERVAL:10S}
quarkus.log.handler.splunk.max-retries=${SPLUNK_HEC_RETRY_COUNT:0}
quarkus.log.handler.splunk.metadata-fields.namespace=${SPLUNKMETA_namespace:local}
quarkus.log.handler.splunk.format=%d %-5p [%c{3.}] (%t) %s%e%n
quarkus.log.handler.splunk.include-exception=${SPLUNK_HEC_INCLUDE_EX:false}

# otel config
quarkus.otel.sdk.disabled=true
%ephemeral.quarkus.otel.sdk.disabled=true
%stage.quarkus.otel.sdk.disabled=false
%prod.quarkus.otel.sdk.disabled=false

quarkus.otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:http://splunk-otel-collector:4317}
# Metrics and logging are not yet supported - 30 Jul 2024
quarkus.otel.exporter.otlp.traces.protocol=${OTEL_EXPORTER_OTLP_PROTOCOL:grpc}

# configuration properties for contracts client
rhsm-subscriptions.contracts.use-stub=${CONTRACT_USE_STUB:false}
quarkus.rest-client."com.redhat.swatch.clients.contracts.api.resources.DefaultApi".uri=${clowder.endpoints.swatch-contracts-service.url:http://localhost:8001}
quarkus.rest-client."com.redhat.swatch.clients.contracts.api.resources.DefaultApi".trust-store=${clowder.endpoints.swatch-contracts-service.trust-store-path}
quarkus.rest-client."com.redhat.swatch.clients.contracts.api.resources.DefaultApi".trust-store-password=${clowder.endpoints.swatch-contracts-service.trust-store-password}
quarkus.rest-client."com.redhat.swatch.clients.contracts.api.resources.DefaultApi".trust-store-type=${clowder.endpoints.swatch-contracts-service.trust-store-type}
quarkus.rest-client."com.redhat.swatch.clients.contracts.api.resources.DefaultApi".providers=com.redhat.swatch.resteasy.client.SwatchPskHeaderFilter

# remittance retention policy configuration:
# 70 days worth
rhsm-subscriptions.remittance-retention-policy.duration=${REMITTANCE_RETENTION_DURATION:70d}
