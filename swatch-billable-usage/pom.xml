<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.redhat.swatch</groupId>
    <artifactId>swatch-quarkus-parent</artifactId>
    <version>1.1.0-SNAPSHOT</version>
    <relativePath>../swatch-quarkus-parent/pom.xml</relativePath>
  </parent>

  <artifactId>swatch-billable-usage</artifactId>
  <name>SWATCH - Services - Billable Usage</name>

  <dependencies>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-micrometer-registry-prometheus</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-resteasy-jackson</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-opentelemetry</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-oidc-client</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-kafka-streams</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-smallrye-openapi</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-messaging-kafka</artifactId>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-jdbc-postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch.clients.quarkus</groupId>
      <artifactId>contracts-client</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-config-workaround</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-resteasy</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-resteasy-client</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-clock</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-panache</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-kafka</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-health</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-smallrye-fault-tolerance</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-trace-response</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-common-splunk</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-model-billable-usage</artifactId>
    </dependency>
    <dependency>
      <groupId>jakarta.validation</groupId>
      <artifactId>jakarta.validation-api</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.cloud.common</groupId>
      <artifactId>clowder-quarkus-config-source</artifactId>
    </dependency>
    <dependency>
      <groupId>com.redhat.swatch</groupId>
      <artifactId>swatch-product-configuration</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct-processor</artifactId>
    </dependency>

    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-junit5-mockito</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.quarkus</groupId>
      <artifactId>quarkus-jdbc-h2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.smallrye.reactive</groupId>
      <artifactId>smallrye-reactive-messaging-in-memory</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.kafka</groupId>
      <artifactId>kafka-streams-test-utils</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>io.quarkus.platform</groupId>
        <artifactId>quarkus-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <parameters>true</parameters>
          <annotationProcessorPaths>
            <path>
              <groupId>org.hibernate.orm</groupId>
              <artifactId>hibernate-jpamodelgen</artifactId>
            </path>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </path>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.openapitools</groupId>
        <artifactId>openapi-generator-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/src/main/resources/META-INF/openapi.yaml</inputSpec>
              <generatorName>java</generatorName>
              <modelPackage>com.redhat.swatch.billable.usage.openapi.model</modelPackage>
              <apiPackage>com.redhat.swatch.billable.usage.openapi.resource</apiPackage>
              <invokerPackage>com.redhat.swatch.billable.usage.openapi</invokerPackage>
              <groupId>com.redhat.swatch.billable.usage</groupId>
              <output>${project.build.directory}/generated</output>
              <generateApiTests>false</generateApiTests>
              <generateModelTests>false</generateModelTests>
              <configOptions>
                <interfaceOnly>true</interfaceOnly>
                <library>microprofile</library>
                <java8>true</java8>
                <dateLibrary>java8</dateLibrary>
                <serializationLibrary>jackson</serializationLibrary>
                <useBeanValidation>true</useBeanValidation>
                <microprofileRestClientVersion>3.0</microprofileRestClientVersion>
                <useJakartaEE>true</useJakartaEE>
              </configOptions>
              <additionalProperties>
                <!--
                see https://github.com/OpenAPITools/openapi-generator/pull/4713#issuecomment-633906581
                microprofile doesn't support the standard useJakartaEE=true
                -->
                <additionalProperty>disableMultipart=true</additionalProperty>
                <additionalProperty>rootJavaEEPackage=jakarta</additionalProperty>
              </additionalProperties>
              <importMappings>
                <importMapping>
                  BillableUsage=org.candlepin.subscriptions.billable.usage.BillableUsage
                </importMapping>
              </importMappings>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jsonschema2pojo</groupId>
        <artifactId>jsonschema2pojo-maven-plugin</artifactId>
        <configuration>
          <sourceDirectory>${maven.multiModuleProjectDirectory}/swatch-core/schemas
          </sourceDirectory>
          <sourcePaths>
            <sourcePath>enabled_orgs_request.yaml</sourcePath>
            <sourcePath>enabled_orgs_response.yaml</sourcePath>
            <sourcePath>tally_summary.yaml</sourcePath>
          </sourcePaths>
          <targetPackage>com.redhat.swatch.billable.usage.model</targetPackage>
          <outputDirectory>${project.build.directory}/generated/src/gen/java</outputDirectory>
          <includeAdditionalProperties>false</includeAdditionalProperties>
          <includeJsr303Annotations>true</includeJsr303Annotations>
          <initializeCollections>false</initializeCollections>
          <dateTimeType>java.time.OffsetDateTime</dateTimeType>
          <sourceType>yamlschema</sourceType>
          <generateBuilders>true</generateBuilders>
          <includeGetters>true</includeGetters>
          <includeSetters>true</includeSetters>
          <useJakartaValidation>true</useJakartaValidation>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated/src/gen/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
